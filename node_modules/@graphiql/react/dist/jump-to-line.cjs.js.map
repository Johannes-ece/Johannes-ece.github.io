{"version":3,"file":"jump-to-line.cjs.js","sources":["../../../node_modules/codemirror/addon/search/jump-to-line.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Defines jumpToLine command. Uses dialog.js if present.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../dialog/dialog\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../dialog/dialog\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  // default search panel location\n  CodeMirror.defineOption(\"search\", {bottom: false});\n\n  function dialog(cm, text, shortText, deflt, f) {\n    if (cm.openDialog) cm.openDialog(text, f, {value: deflt, selectValueOnOpen: true, bottom: cm.options.search.bottom});\n    else f(prompt(shortText, deflt));\n  }\n\n  function getJumpDialog(cm) {\n    return cm.phrase(\"Jump to line:\") + ' <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">' + cm.phrase(\"(Use line:column or scroll% syntax)\") + '</span>';\n  }\n\n  function interpretLine(cm, string) {\n    var num = Number(string)\n    if (/^[-+]/.test(string)) return cm.getCursor().line + num\n    else return num - 1\n  }\n\n  CodeMirror.commands.jumpToLine = function(cm) {\n    var cur = cm.getCursor();\n    dialog(cm, getJumpDialog(cm), cm.phrase(\"Jump to line:\"), (cur.line + 1) + \":\" + cur.ch, function(posStr) {\n      if (!posStr) return;\n\n      var match;\n      if (match = /^\\s*([\\+\\-]?\\d+)\\s*\\:\\s*(\\d+)\\s*$/.exec(posStr)) {\n        cm.setCursor(interpretLine(cm, match[1]), Number(match[2]))\n      } else if (match = /^\\s*([\\+\\-]?\\d+(\\.\\d+)?)\\%\\s*/.exec(posStr)) {\n        var line = Math.round(cm.lineCount() * Number(match[1]) / 100);\n        if (/^[-+]/.test(match[1])) line = cur.line + line + 1;\n        cm.setCursor(line - 1, cur.ch);\n      } else if (match = /^\\s*\\:?\\s*([\\+\\-]?\\d+)\\s*/.exec(posStr)) {\n        cm.setCursor(interpretLine(cm, match[1]), cur.ch);\n      }\n    });\n  };\n\n  CodeMirror.keyMap[\"default\"][\"Alt-G\"] = \"jumpToLine\";\n});\n"],"names":["require$$0","require$$1"],"mappings":"0jBAKA,AAAC,UAAS,EAAK,CAEX,EAAIA,EAAAA,aAAAA,QAAiCC,EAAAA,SAAAA,OAA2B,CAKpE,GAAG,SAAS,EAAY,CAItB,EAAW,aAAa,SAAU,CAAC,OAAQ,EAAK,CAAC,EAEjD,WAAgB,EAAI,EAAM,EAAW,EAAO,EAAG,CAC7C,AAAI,EAAG,WAAY,EAAG,WAAW,EAAM,EAAG,CAAC,MAAO,EAAO,kBAAmB,GAAM,OAAQ,EAAG,QAAQ,OAAO,MAAM,CAAC,EAC9G,EAAE,OAAO,EAAW,CAAK,CAAC,CAChC,CAHQ,cAKT,WAAuB,EAAI,CACzB,MAAO,GAAG,OAAO,eAAe,EAAI,sIAAwI,EAAG,OAAO,qCAAqC,EAAI,SAChO,CAFQ,qBAIT,WAAuB,EAAI,EAAQ,CACjC,GAAI,GAAM,OAAO,CAAM,EACvB,MAAI,QAAQ,KAAK,CAAM,EAAU,EAAG,UAAS,EAAG,KAAO,EAC3C,EAAM,CACnB,CAJQ,qBAMT,EAAW,SAAS,WAAa,SAAS,EAAI,CAC5C,GAAI,GAAM,EAAG,YACb,EAAO,EAAI,EAAc,CAAE,EAAG,EAAG,OAAO,eAAe,EAAI,EAAI,KAAO,EAAK,IAAM,EAAI,GAAI,SAAS,EAAQ,CACxG,GAAI,EAAC,EAEL,IAAI,GACJ,GAAI,EAAQ,oCAAoC,KAAK,CAAM,EACzD,EAAG,UAAU,EAAc,EAAI,EAAM,EAAE,EAAG,OAAO,EAAM,EAAE,CAAC,UACjD,EAAQ,gCAAgC,KAAK,CAAM,EAAG,CAC/D,GAAI,GAAO,KAAK,MAAM,EAAG,UAAS,EAAK,OAAO,EAAM,EAAE,EAAI,GAAG,EAC7D,AAAI,QAAQ,KAAK,EAAM,EAAE,GAAG,GAAO,EAAI,KAAO,EAAO,GACrD,EAAG,UAAU,EAAO,EAAG,EAAI,EAAE,CAC9B,KAAM,AAAI,GAAQ,4BAA4B,KAAK,CAAM,IACxD,EAAG,UAAU,EAAc,EAAI,EAAM,EAAE,EAAG,EAAI,EAAE,EAExD,CAAK,CACL,EAEE,EAAW,OAAO,QAAW,SAAW,YAC1C,CAAC"}