{"version":3,"file":"SchemaReference.cjs.js","sources":["../../codemirror-graphql/esm/utils/getTypeInfo.js","../../codemirror-graphql/esm/utils/SchemaReference.js"],"sourcesContent":["import { isCompositeType, getNullableType, getNamedType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, } from 'graphql';\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef, } from 'graphql/type/introspection';\nimport forEachState from './forEachState';\nexport default function getTypeInfo(schema, tokenState) {\n    const info = {\n        schema,\n        type: null,\n        parentType: null,\n        inputType: null,\n        directiveDef: null,\n        fieldDef: null,\n        argDef: null,\n        argDefs: null,\n        objectFieldDefs: null,\n    };\n    forEachState(tokenState, (state) => {\n        var _a, _b;\n        switch (state.kind) {\n            case 'Query':\n            case 'ShortQuery':\n                info.type = schema.getQueryType();\n                break;\n            case 'Mutation':\n                info.type = schema.getMutationType();\n                break;\n            case 'Subscription':\n                info.type = schema.getSubscriptionType();\n                break;\n            case 'InlineFragment':\n            case 'FragmentDefinition':\n                if (state.type) {\n                    info.type = schema.getType(state.type);\n                }\n                break;\n            case 'Field':\n            case 'AliasedField':\n                info.fieldDef =\n                    info.type && state.name\n                        ? getFieldDef(schema, info.parentType, state.name)\n                        : null;\n                info.type = (_a = info.fieldDef) === null || _a === void 0 ? void 0 : _a.type;\n                break;\n            case 'SelectionSet':\n                info.parentType = info.type ? getNamedType(info.type) : null;\n                break;\n            case 'Directive':\n                info.directiveDef = state.name ? schema.getDirective(state.name) : null;\n                break;\n            case 'Arguments':\n                const parentDef = state.prevState\n                    ? state.prevState.kind === 'Field'\n                        ? info.fieldDef\n                        : state.prevState.kind === 'Directive'\n                            ? info.directiveDef\n                            : state.prevState.kind === 'AliasedField'\n                                ? state.prevState.name &&\n                                    getFieldDef(schema, info.parentType, state.prevState.name)\n                                : null\n                    : null;\n                info.argDefs = parentDef ? parentDef.args : null;\n                break;\n            case 'Argument':\n                info.argDef = null;\n                if (info.argDefs) {\n                    for (let i = 0; i < info.argDefs.length; i++) {\n                        if (info.argDefs[i].name === state.name) {\n                            info.argDef = info.argDefs[i];\n                            break;\n                        }\n                    }\n                }\n                info.inputType = (_b = info.argDef) === null || _b === void 0 ? void 0 : _b.type;\n                break;\n            case 'EnumValue':\n                const enumType = info.inputType ? getNamedType(info.inputType) : null;\n                info.enumValue =\n                    enumType instanceof GraphQLEnumType\n                        ? find(enumType.getValues(), val => val.value === state.name)\n                        : null;\n                break;\n            case 'ListValue':\n                const nullableType = info.inputType\n                    ? getNullableType(info.inputType)\n                    : null;\n                info.inputType =\n                    nullableType instanceof GraphQLList ? nullableType.ofType : null;\n                break;\n            case 'ObjectValue':\n                const objectType = info.inputType ? getNamedType(info.inputType) : null;\n                info.objectFieldDefs =\n                    objectType instanceof GraphQLInputObjectType\n                        ? objectType.getFields()\n                        : null;\n                break;\n            case 'ObjectField':\n                const objectField = state.name && info.objectFieldDefs\n                    ? info.objectFieldDefs[state.name]\n                    : null;\n                info.inputType = objectField === null || objectField === void 0 ? void 0 : objectField.type;\n                break;\n            case 'NamedType':\n                info.type = state.name ? schema.getType(state.name) : null;\n                break;\n        }\n    });\n    return info;\n}\nfunction getFieldDef(schema, type, fieldName) {\n    if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === type) {\n        return SchemaMetaFieldDef;\n    }\n    if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === type) {\n        return TypeMetaFieldDef;\n    }\n    if (fieldName === TypeNameMetaFieldDef.name && isCompositeType(type)) {\n        return TypeNameMetaFieldDef;\n    }\n    if (type && type.getFields) {\n        return type.getFields()[fieldName];\n    }\n}\nfunction find(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i])) {\n            return array[i];\n        }\n    }\n}\n//# sourceMappingURL=getTypeInfo.js.map","import { getNamedType } from 'graphql';\nexport function getFieldReference(typeInfo) {\n    return {\n        kind: 'Field',\n        schema: typeInfo.schema,\n        field: typeInfo.fieldDef,\n        type: isMetaField(typeInfo.fieldDef) ? null : typeInfo.parentType,\n    };\n}\nexport function getDirectiveReference(typeInfo) {\n    return {\n        kind: 'Directive',\n        schema: typeInfo.schema,\n        directive: typeInfo.directiveDef,\n    };\n}\nexport function getArgumentReference(typeInfo) {\n    return typeInfo.directiveDef\n        ? {\n            kind: 'Argument',\n            schema: typeInfo.schema,\n            argument: typeInfo.argDef,\n            directive: typeInfo.directiveDef,\n        }\n        : {\n            kind: 'Argument',\n            schema: typeInfo.schema,\n            argument: typeInfo.argDef,\n            field: typeInfo.fieldDef,\n            type: isMetaField(typeInfo.fieldDef) ? null : typeInfo.parentType,\n        };\n}\nexport function getEnumValueReference(typeInfo) {\n    return {\n        kind: 'EnumValue',\n        value: typeInfo.enumValue || undefined,\n        type: typeInfo.inputType\n            ? getNamedType(typeInfo.inputType)\n            : undefined,\n    };\n}\nexport function getTypeReference(typeInfo, type) {\n    return {\n        kind: 'Type',\n        schema: typeInfo.schema,\n        type: type || typeInfo.type,\n    };\n}\nfunction isMetaField(fieldDef) {\n    return fieldDef.name.slice(0, 2) === '__';\n}\n//# sourceMappingURL=SchemaReference.js.map"],"names":["forEachState","getNamedType","GraphQLEnumType","getNullableType","GraphQLList","GraphQLInputObjectType","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","isCompositeType"],"mappings":"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"}