"use strict";var q=Object.defineProperty;var d=(n,a)=>q(n,"name",{value:a,configurable:!0});var v=require("./codemirror.cjs.js"),t=require("graphql"),y=require("./index.cjs.js"),f=require("./Range.cjs.js");require("react");require("react-dom");const N=[t.LoneSchemaDefinitionRule,t.UniqueOperationTypesRule,t.UniqueTypeNamesRule,t.UniqueEnumValueNamesRule,t.UniqueFieldDefinitionNamesRule,t.UniqueDirectiveNamesRule,t.KnownTypeNamesRule,t.KnownDirectivesRule,t.UniqueDirectivesPerLocationRule,t.PossibleTypeExtensionsRule,t.UniqueArgumentNamesRule,t.UniqueInputFieldNamesRule];function D(n,a,s,l,i){const r=t.specifiedRules.filter(e=>!(e===t.NoUnusedFragmentsRule||e===t.ExecutableDefinitionsRule||l&&e===t.KnownFragmentNamesRule));return s&&Array.prototype.push.apply(r,s),i&&Array.prototype.push.apply(r,N),t.validate(n,a,r).filter(e=>{if(e.message.includes("Unknown directive")&&e.nodes){const u=e.nodes[0];if(u&&u.kind===t.Kind.DIRECTIVE){const c=u.name.value;if(c==="arguments"||c==="argumentDefinitions")return!1}}return!0})}d(D,"validateWithCustomRules");const g={Error:"Error",Warning:"Warning",Information:"Information",Hint:"Hint"},R={[g.Error]:1,[g.Warning]:2,[g.Information]:3,[g.Hint]:4},m=d((n,a)=>{if(!n)throw new Error(a)},"invariant");function L(n,a=null,s,l,i){var r,o;let e=null,u="";i&&(u=typeof i=="string"?i:i.reduce((p,h)=>p+t.print(h)+`

`,""));const c=u?`${n}

${u}`:n;try{e=t.parse(c)}catch(p){if(p instanceof t.GraphQLError){const h=S((o=(r=p.locations)===null||r===void 0?void 0:r[0])!==null&&o!==void 0?o:{line:0,column:0},c);return[{severity:R.Error,message:p.message,source:"GraphQL: Syntax",range:h}]}throw p}return P(e,a,s,l)}d(L,"getDiagnostics");function P(n,a=null,s,l){if(!a)return[];const i=D(a,n,s,l).flatMap(o=>E(o,R.Error,"Validation")),r=t.validate(a,n,[t.NoDeprecatedCustomRule]).flatMap(o=>E(o,R.Warning,"Deprecation"));return i.concat(r)}d(P,"validateQuery");function E(n,a,s){if(!n.nodes)return[];const l=[];return n.nodes.forEach((i,r)=>{const o=i.kind!=="Variable"&&"name"in i&&i.name!==void 0?i.name:"variable"in i&&i.variable!==void 0?i.variable:i;if(o){m(n.locations,"GraphQL validation error requires locations.");const e=n.locations[r],u=T(o),c=e.column+(u.end-u.start);l.push({source:`GraphQL: ${s}`,message:n.message,severity:a,range:new f.Range(new f.Position(e.line-1,e.column-1),new f.Position(e.line-1,c))})}}),l}d(E,"annotations");function S(n,a){const s=y.onlineParser(),l=s.startState(),i=a.split(`
`);m(i.length>=n.line,"Query text must have more lines than where the error happened");let r=null;for(let c=0;c<n.line;c++)for(r=new y.CharacterStream(i[c]);!r.eol()&&s.token(r,l)!=="invalidchar";);m(r,"Expected Parser stream to be available.");const o=n.line-1,e=r.getStartOfToken(),u=r.getCurrentPosition();return new f.Range(new f.Position(o,e),new f.Position(o,u))}d(S,"getRange");function T(n){const s=n.loc;return m(s,"Expected ASTNode to have a location."),s}d(T,"getLocation");const w=["error","warning","information","hint"],C={"GraphQL: Validation":"validation","GraphQL: Deprecation":"deprecation","GraphQL: Syntax":"syntax"};v.CodeMirror.registerHelper("lint","graphql",(n,a)=>{const{schema:s,validationRules:l,externalFragments:i}=a;return L(n,s,l,void 0,i).map(e=>({message:e.message,severity:e.severity?w[e.severity-1]:w[0],type:e.source?C[e.source]:void 0,from:v.CodeMirror.Pos(e.range.start.line,e.range.start.character),to:v.CodeMirror.Pos(e.range.end.line,e.range.end.character)}))});
//# sourceMappingURL=lint.cjs.js.map
