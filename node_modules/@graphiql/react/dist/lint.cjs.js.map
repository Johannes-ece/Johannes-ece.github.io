{"version":3,"file":"lint.cjs.js","sources":["../../graphql-language-service/esm/utils/validateWithCustomRules.js","../../graphql-language-service/esm/interface/getDiagnostics.js","../../codemirror-graphql/esm/lint.js"],"sourcesContent":["import { specifiedRules, validate, NoUnusedFragmentsRule, KnownFragmentNamesRule, Kind, ExecutableDefinitionsRule, LoneSchemaDefinitionRule, UniqueOperationTypesRule, UniqueTypeNamesRule, UniqueEnumValueNamesRule, UniqueFieldDefinitionNamesRule, UniqueDirectiveNamesRule, KnownTypeNamesRule, KnownDirectivesRule, UniqueDirectivesPerLocationRule, PossibleTypeExtensionsRule, UniqueArgumentNamesRule, UniqueInputFieldNamesRule, } from 'graphql';\nconst specifiedSDLRules = [\n    LoneSchemaDefinitionRule,\n    UniqueOperationTypesRule,\n    UniqueTypeNamesRule,\n    UniqueEnumValueNamesRule,\n    UniqueFieldDefinitionNamesRule,\n    UniqueDirectiveNamesRule,\n    KnownTypeNamesRule,\n    KnownDirectivesRule,\n    UniqueDirectivesPerLocationRule,\n    PossibleTypeExtensionsRule,\n    UniqueArgumentNamesRule,\n    UniqueInputFieldNamesRule,\n];\nexport function validateWithCustomRules(schema, ast, customRules, isRelayCompatMode, isSchemaDocument) {\n    const rules = specifiedRules.filter(rule => {\n        if (rule === NoUnusedFragmentsRule || rule === ExecutableDefinitionsRule) {\n            return false;\n        }\n        if (isRelayCompatMode && rule === KnownFragmentNamesRule) {\n            return false;\n        }\n        return true;\n    });\n    if (customRules) {\n        Array.prototype.push.apply(rules, customRules);\n    }\n    if (isSchemaDocument) {\n        Array.prototype.push.apply(rules, specifiedSDLRules);\n    }\n    const errors = validate(schema, ast, rules);\n    return errors.filter(error => {\n        if (error.message.includes('Unknown directive') && error.nodes) {\n            const node = error.nodes[0];\n            if (node && node.kind === Kind.DIRECTIVE) {\n                const name = node.name.value;\n                if (name === 'arguments' || name === 'argumentDefinitions') {\n                    return false;\n                }\n            }\n        }\n        return true;\n    });\n}\n//# sourceMappingURL=validateWithCustomRules.js.map","import { GraphQLError, print, validate, NoDeprecatedCustomRule, parse, } from 'graphql';\nimport { CharacterStream, onlineParser } from '../parser';\nimport { Range, validateWithCustomRules, Position } from '../utils';\nexport const SEVERITY = {\n    Error: 'Error',\n    Warning: 'Warning',\n    Information: 'Information',\n    Hint: 'Hint',\n};\nexport const DIAGNOSTIC_SEVERITY = {\n    [SEVERITY.Error]: 1,\n    [SEVERITY.Warning]: 2,\n    [SEVERITY.Information]: 3,\n    [SEVERITY.Hint]: 4,\n};\nconst invariant = (condition, message) => {\n    if (!condition) {\n        throw new Error(message);\n    }\n};\nexport function getDiagnostics(query, schema = null, customRules, isRelayCompatMode, externalFragments) {\n    var _a, _b;\n    let ast = null;\n    let fragments = '';\n    if (externalFragments) {\n        fragments =\n            typeof externalFragments === 'string'\n                ? externalFragments\n                : externalFragments.reduce((acc, node) => acc + print(node) + '\\n\\n', '');\n    }\n    const enhancedQuery = fragments ? `${query}\\n\\n${fragments}` : query;\n    try {\n        ast = parse(enhancedQuery);\n    }\n    catch (error) {\n        if (error instanceof GraphQLError) {\n            const range = getRange((_b = (_a = error.locations) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : { line: 0, column: 0 }, enhancedQuery);\n            return [\n                {\n                    severity: DIAGNOSTIC_SEVERITY.Error,\n                    message: error.message,\n                    source: 'GraphQL: Syntax',\n                    range,\n                },\n            ];\n        }\n        throw error;\n    }\n    return validateQuery(ast, schema, customRules, isRelayCompatMode);\n}\nexport function validateQuery(ast, schema = null, customRules, isRelayCompatMode) {\n    if (!schema) {\n        return [];\n    }\n    const validationErrorAnnotations = validateWithCustomRules(schema, ast, customRules, isRelayCompatMode).flatMap(error => annotations(error, DIAGNOSTIC_SEVERITY.Error, 'Validation'));\n    const deprecationWarningAnnotations = validate(schema, ast, [\n        NoDeprecatedCustomRule,\n    ]).flatMap(error => annotations(error, DIAGNOSTIC_SEVERITY.Warning, 'Deprecation'));\n    return validationErrorAnnotations.concat(deprecationWarningAnnotations);\n}\nfunction annotations(error, severity, type) {\n    if (!error.nodes) {\n        return [];\n    }\n    const highlightedNodes = [];\n    error.nodes.forEach((node, i) => {\n        const highlightNode = node.kind !== 'Variable' && 'name' in node && node.name !== undefined\n            ? node.name\n            : 'variable' in node && node.variable !== undefined\n                ? node.variable\n                : node;\n        if (highlightNode) {\n            invariant(error.locations, 'GraphQL validation error requires locations.');\n            const loc = error.locations[i];\n            const highlightLoc = getLocation(highlightNode);\n            const end = loc.column + (highlightLoc.end - highlightLoc.start);\n            highlightedNodes.push({\n                source: `GraphQL: ${type}`,\n                message: error.message,\n                severity,\n                range: new Range(new Position(loc.line - 1, loc.column - 1), new Position(loc.line - 1, end)),\n            });\n        }\n    });\n    return highlightedNodes;\n}\nexport function getRange(location, queryText) {\n    const parser = onlineParser();\n    const state = parser.startState();\n    const lines = queryText.split('\\n');\n    invariant(lines.length >= location.line, 'Query text must have more lines than where the error happened');\n    let stream = null;\n    for (let i = 0; i < location.line; i++) {\n        stream = new CharacterStream(lines[i]);\n        while (!stream.eol()) {\n            const style = parser.token(stream, state);\n            if (style === 'invalidchar') {\n                break;\n            }\n        }\n    }\n    invariant(stream, 'Expected Parser stream to be available.');\n    const line = location.line - 1;\n    const start = stream.getStartOfToken();\n    const end = stream.getCurrentPosition();\n    return new Range(new Position(line, start), new Position(line, end));\n}\nfunction getLocation(node) {\n    const typeCastedNode = node;\n    const location = typeCastedNode.loc;\n    invariant(location, 'Expected ASTNode to have a location.');\n    return location;\n}\n//# sourceMappingURL=getDiagnostics.js.map","import CodeMirror from 'codemirror';\nimport { getDiagnostics } from 'graphql-language-service';\nconst SEVERITY = ['error', 'warning', 'information', 'hint'];\nconst TYPE = {\n    'GraphQL: Validation': 'validation',\n    'GraphQL: Deprecation': 'deprecation',\n    'GraphQL: Syntax': 'syntax',\n};\nCodeMirror.registerHelper('lint', 'graphql', (text, options) => {\n    const { schema, validationRules, externalFragments } = options;\n    const rawResults = getDiagnostics(text, schema, validationRules, undefined, externalFragments);\n    const results = rawResults.map(error => ({\n        message: error.message,\n        severity: error.severity ? SEVERITY[error.severity - 1] : SEVERITY[0],\n        type: error.source ? TYPE[error.source] : undefined,\n        from: CodeMirror.Pos(error.range.start.line, error.range.start.character),\n        to: CodeMirror.Pos(error.range.end.line, error.range.end.character),\n    }));\n    return results;\n});\n//# sourceMappingURL=lint.js.map"],"names":["LoneSchemaDefinitionRule","UniqueOperationTypesRule","UniqueTypeNamesRule","UniqueEnumValueNamesRule","UniqueFieldDefinitionNamesRule","UniqueDirectiveNamesRule","KnownTypeNamesRule","KnownDirectivesRule","UniqueDirectivesPerLocationRule","PossibleTypeExtensionsRule","UniqueArgumentNamesRule","UniqueInputFieldNamesRule","specifiedRules","NoUnusedFragmentsRule","ExecutableDefinitionsRule","KnownFragmentNamesRule","validate","Kind","SEVERITY","print","parse","GraphQLError","NoDeprecatedCustomRule","Range","Position","onlineParser","CharacterStream","CodeMirror"],"mappings":"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"}