{"version":3,"file":"comment.cjs.js","sources":["../../../node_modules/codemirror/addon/comment/comment.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var noOptions = {};\n  var nonWS = /[^\\s\\u00a0]/;\n  var Pos = CodeMirror.Pos, cmp = CodeMirror.cmpPos;\n\n  function firstNonWS(str) {\n    var found = str.search(nonWS);\n    return found == -1 ? 0 : found;\n  }\n\n  CodeMirror.commands.toggleComment = function(cm) {\n    cm.toggleComment();\n  };\n\n  CodeMirror.defineExtension(\"toggleComment\", function(options) {\n    if (!options) options = noOptions;\n    var cm = this;\n    var minLine = Infinity, ranges = this.listSelections(), mode = null;\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      if (from.line >= minLine) continue;\n      if (to.line >= minLine) to = Pos(minLine, 0);\n      minLine = from.line;\n      if (mode == null) {\n        if (cm.uncomment(from, to, options)) mode = \"un\";\n        else { cm.lineComment(from, to, options); mode = \"line\"; }\n      } else if (mode == \"un\") {\n        cm.uncomment(from, to, options);\n      } else {\n        cm.lineComment(from, to, options);\n      }\n    }\n  });\n\n  // Rough heuristic to try and detect lines that are part of multi-line string\n  function probablyInsideString(cm, pos, line) {\n    return /\\bstring\\b/.test(cm.getTokenTypeAt(Pos(pos.line, 0))) && !/^[\\'\\\"\\`]/.test(line)\n  }\n\n  function getMode(cm, pos) {\n    var mode = cm.getMode()\n    return mode.useInnerComments === false || !mode.innerMode ? mode : cm.getModeAt(pos)\n  }\n\n  CodeMirror.defineExtension(\"lineComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var firstLine = self.getLine(from.line);\n    if (firstLine == null || probablyInsideString(self, from, firstLine)) return;\n\n    var commentString = options.lineComment || mode.lineComment;\n    if (!commentString) {\n      if (options.blockCommentStart || mode.blockCommentStart) {\n        options.fullLines = true;\n        self.blockComment(from, to, options);\n      }\n      return;\n    }\n\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line + 1 : to.line, self.lastLine() + 1);\n    var pad = options.padding == null ? \" \" : options.padding;\n    var blankLines = options.commentBlankLines || from.line == to.line;\n\n    self.operation(function() {\n      if (options.indent) {\n        var baseString = null;\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i);\n          var whitespace = line.slice(0, firstNonWS(line));\n          if (baseString == null || baseString.length > whitespace.length) {\n            baseString = whitespace;\n          }\n        }\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i), cut = baseString.length;\n          if (!blankLines && !nonWS.test(line)) continue;\n          if (line.slice(0, cut) != baseString) cut = firstNonWS(line);\n          self.replaceRange(baseString + commentString + pad, Pos(i, 0), Pos(i, cut));\n        }\n      } else {\n        for (var i = from.line; i < end; ++i) {\n          if (blankLines || nonWS.test(self.getLine(i)))\n            self.replaceRange(commentString + pad, Pos(i, 0));\n        }\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"blockComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) {\n      if ((options.lineComment || mode.lineComment) && options.fullLines != false)\n        self.lineComment(from, to, options);\n      return;\n    }\n    if (/\\bcomment\\b/.test(self.getTokenTypeAt(Pos(from.line, 0)))) return\n\n    var end = Math.min(to.line, self.lastLine());\n    if (end != from.line && to.ch == 0 && nonWS.test(self.getLine(end))) --end;\n\n    var pad = options.padding == null ? \" \" : options.padding;\n    if (from.line > end) return;\n\n    self.operation(function() {\n      if (options.fullLines != false) {\n        var lastLineHasText = nonWS.test(self.getLine(end));\n        self.replaceRange(pad + endString, Pos(end));\n        self.replaceRange(startString + pad, Pos(from.line, 0));\n        var lead = options.blockCommentLead || mode.blockCommentLead;\n        if (lead != null) for (var i = from.line + 1; i <= end; ++i)\n          if (i != end || lastLineHasText)\n            self.replaceRange(lead + pad, Pos(i, 0));\n      } else {\n        var atCursor = cmp(self.getCursor(\"to\"), to) == 0, empty = !self.somethingSelected()\n        self.replaceRange(endString, to);\n        if (atCursor) self.setSelection(empty ? to : self.getCursor(\"from\"), to)\n        self.replaceRange(startString, from);\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"uncomment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line : to.line - 1, self.lastLine()), start = Math.min(from.line, end);\n\n    // Try finding line comments\n    var lineString = options.lineComment || mode.lineComment, lines = [];\n    var pad = options.padding == null ? \" \" : options.padding, didSomething;\n    lineComment: {\n      if (!lineString) break lineComment;\n      for (var i = start; i <= end; ++i) {\n        var line = self.getLine(i);\n        var found = line.indexOf(lineString);\n        if (found > -1 && !/comment/.test(self.getTokenTypeAt(Pos(i, found + 1)))) found = -1;\n        if (found == -1 && nonWS.test(line)) break lineComment;\n        if (found > -1 && nonWS.test(line.slice(0, found))) break lineComment;\n        lines.push(line);\n      }\n      self.operation(function() {\n        for (var i = start; i <= end; ++i) {\n          var line = lines[i - start];\n          var pos = line.indexOf(lineString), endPos = pos + lineString.length;\n          if (pos < 0) continue;\n          if (line.slice(endPos, endPos + pad.length) == pad) endPos += pad.length;\n          didSomething = true;\n          self.replaceRange(\"\", Pos(i, pos), Pos(i, endPos));\n        }\n      });\n      if (didSomething) return true;\n    }\n\n    // Try block comments\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) return false;\n    var lead = options.blockCommentLead || mode.blockCommentLead;\n    var startLine = self.getLine(start), open = startLine.indexOf(startString)\n    if (open == -1) return false\n    var endLine = end == start ? startLine : self.getLine(end)\n    var close = endLine.indexOf(endString, end == start ? open + startString.length : 0);\n    var insideStart = Pos(start, open + 1), insideEnd = Pos(end, close + 1)\n    if (close == -1 ||\n        !/comment/.test(self.getTokenTypeAt(insideStart)) ||\n        !/comment/.test(self.getTokenTypeAt(insideEnd)) ||\n        self.getRange(insideStart, insideEnd, \"\\n\").indexOf(endString) > -1)\n      return false;\n\n    // Avoid killing block comments completely outside the selection.\n    // Positions of the last startString before the start of the selection, and the first endString after it.\n    var lastStart = startLine.lastIndexOf(startString, from.ch);\n    var firstEnd = lastStart == -1 ? -1 : startLine.slice(0, from.ch).indexOf(endString, lastStart + startString.length);\n    if (lastStart != -1 && firstEnd != -1 && firstEnd + endString.length != from.ch) return false;\n    // Positions of the first endString after the end of the selection, and the last startString before it.\n    firstEnd = endLine.indexOf(endString, to.ch);\n    var almostLastStart = endLine.slice(to.ch).lastIndexOf(startString, firstEnd - to.ch);\n    lastStart = (firstEnd == -1 || almostLastStart == -1) ? -1 : to.ch + almostLastStart;\n    if (firstEnd != -1 && lastStart != -1 && lastStart != to.ch) return false;\n\n    self.operation(function() {\n      self.replaceRange(\"\", Pos(end, close - (pad && endLine.slice(close - pad.length, close) == pad ? pad.length : 0)),\n                        Pos(end, close + endString.length));\n      var openEnd = open + startString.length;\n      if (pad && startLine.slice(openEnd, openEnd + pad.length) == pad) openEnd += pad.length;\n      self.replaceRange(\"\", Pos(start, open), Pos(start, openEnd));\n      if (lead) for (var i = start + 1; i <= end; ++i) {\n        var line = self.getLine(i), found = line.indexOf(lead);\n        if (found == -1 || nonWS.test(line.slice(0, found))) continue;\n        var foundEnd = found + lead.length;\n        if (pad && line.slice(foundEnd, foundEnd + pad.length) == pad) foundEnd += pad.length;\n        self.replaceRange(\"\", Pos(i, found), Pos(i, foundEnd));\n      }\n    });\n    return true;\n  });\n});\n"],"names":["require$$0"],"mappings":"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"}