"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetcherReturnToPromise = exports.isAsyncIterable = exports.isObservable = exports.isPromise = void 0;
function isPromise(value) {
    return (typeof value === 'object' &&
        value !== null &&
        typeof value.then === 'function');
}
exports.isPromise = isPromise;
function observableToPromise(observable) {
    return new Promise(function (resolve, reject) {
        var subscription = observable.subscribe({
            next: function (v) {
                resolve(v);
                subscription.unsubscribe();
            },
            error: reject,
            complete: function () {
                reject(new Error('no value resolved'));
            },
        });
    });
}
function isObservable(value) {
    return (typeof value === 'object' &&
        value !== null &&
        'subscribe' in value &&
        typeof value.subscribe === 'function');
}
exports.isObservable = isObservable;
function isAsyncIterable(input) {
    return (typeof input === 'object' &&
        input !== null &&
        (input[Symbol.toStringTag] === 'AsyncGenerator' ||
            Symbol.asyncIterator in input));
}
exports.isAsyncIterable = isAsyncIterable;
function asyncIterableToPromise(input) {
    return new Promise(function (resolve, reject) {
        var _a;
        var iteratorReturn = (_a = ('return' in input ? input : input[Symbol.asyncIterator]()).return) === null || _a === void 0 ? void 0 : _a.bind(input);
        var iteratorNext = ('next' in input ? input : input[Symbol.asyncIterator]()).next.bind(input);
        iteratorNext()
            .then(function (result) {
            resolve(result.value);
            iteratorReturn === null || iteratorReturn === void 0 ? void 0 : iteratorReturn();
        })
            .catch(function (err) {
            reject(err);
        });
    });
}
function fetcherReturnToPromise(fetcherResult) {
    return Promise.resolve(fetcherResult).then(function (result) {
        if (isAsyncIterable(result)) {
            return asyncIterableToPromise(result);
        }
        if (isObservable(result)) {
            return observableToPromise(result);
        }
        return result;
    });
}
exports.fetcherReturnToPromise = fetcherReturnToPromise;
//# sourceMappingURL=index.js.map