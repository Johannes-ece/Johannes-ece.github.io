import {
  indent
} from "./chunk-YFDLFAB5.js";
import {
  CodeMirror
} from "./chunk-5T4K47YI.js";
import {
  list$1,
  onlineParser,
  p$1,
  t$2
} from "./chunk-LKALJRG6.js";
import "./chunk-RMYGERCM.js";
import {
  require_react_dom
} from "./chunk-KBB5QSWM.js";
import {
  require_react
} from "./chunk-KJ3DELDC.js";
import {
  __toESM
} from "./chunk-OZI5HTJH.js";

// node_modules/@graphiql/react/dist/mode.es2.js
var import_react = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
CodeMirror.defineMode("graphql-results", (config) => {
  const parser = onlineParser({
    eatWhitespace: (stream) => stream.eatSpace(),
    lexRules: LexRules,
    parseRules: ParseRules,
    editorConfig: { tabSize: config.tabSize }
  });
  return {
    config,
    startState: parser.startState,
    token: parser.token,
    indent,
    electricInput: /^\s*[}\]]/,
    fold: "brace",
    closeBrackets: {
      pairs: '[]{}""',
      explode: "[]{}"
    }
  };
});
var LexRules = {
  Punctuation: /^\[|]|\{|\}|:|,/,
  Number: /^-?(?:0|(?:[1-9][0-9]*))(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?/,
  String: /^"(?:[^"\\]|\\(?:"|\/|\\|b|f|n|r|t|u[0-9a-fA-F]{4}))*"?/,
  Keyword: /^true|false|null/
};
var ParseRules = {
  Document: [p$1("{"), list$1("Entry", p$1(",")), p$1("}")],
  Entry: [t$2("String", "def"), p$1(":"), "Value"],
  Value(token) {
    switch (token.kind) {
      case "Number":
        return "NumberValue";
      case "String":
        return "StringValue";
      case "Punctuation":
        switch (token.value) {
          case "[":
            return "ListValue";
          case "{":
            return "ObjectValue";
        }
        return null;
      case "Keyword":
        switch (token.value) {
          case "true":
          case "false":
            return "BooleanValue";
          case "null":
            return "NullValue";
        }
        return null;
    }
  },
  NumberValue: [t$2("Number", "number")],
  StringValue: [t$2("String", "string")],
  BooleanValue: [t$2("Keyword", "builtin")],
  NullValue: [t$2("Keyword", "keyword")],
  ListValue: [p$1("["), list$1("Value", p$1(",")), p$1("]")],
  ObjectValue: [p$1("{"), list$1("ObjectField", p$1(",")), p$1("}")],
  ObjectField: [t$2("String", "property"), p$1(":"), "Value"]
};
//# sourceMappingURL=mode.es2-5ODYLXQR.js.map
