{
  "version": 3,
  "sources": ["../../../../../node_modules/codemirror/addon/fold/brace-fold.js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction bracketFolding(pairs) {\n  return function(cm, start) {\n    var line = start.line, lineText = cm.getLine(line);\n\n    function findOpening(pair) {\n      var tokenType;\n      for (var at = start.ch, pass = 0;;) {\n        var found = at <= 0 ? -1 : lineText.lastIndexOf(pair[0], at - 1);\n        if (found == -1) {\n          if (pass == 1) break;\n          pass = 1;\n          at = lineText.length;\n          continue;\n        }\n        if (pass == 1 && found < start.ch) break;\n        tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n        if (!/^(comment|string)/.test(tokenType)) return {ch: found + 1, tokenType: tokenType, pair: pair};\n        at = found - 1;\n      }\n    }\n\n    function findRange(found) {\n      var count = 1, lastLine = cm.lastLine(), end, startCh = found.ch, endCh\n      outer: for (var i = line; i <= lastLine; ++i) {\n        var text = cm.getLine(i), pos = i == line ? startCh : 0;\n        for (;;) {\n          var nextOpen = text.indexOf(found.pair[0], pos), nextClose = text.indexOf(found.pair[1], pos);\n          if (nextOpen < 0) nextOpen = text.length;\n          if (nextClose < 0) nextClose = text.length;\n          pos = Math.min(nextOpen, nextClose);\n          if (pos == text.length) break;\n          if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == found.tokenType) {\n            if (pos == nextOpen) ++count;\n            else if (!--count) { end = i; endCh = pos; break outer; }\n          }\n          ++pos;\n        }\n      }\n\n      if (end == null || line == end) return null\n      return {from: CodeMirror.Pos(line, startCh),\n              to: CodeMirror.Pos(end, endCh)};\n    }\n\n    var found = []\n    for (var i = 0; i < pairs.length; i++) {\n      var open = findOpening(pairs[i])\n      if (open) found.push(open)\n    }\n    found.sort(function(a, b) { return a.ch - b.ch })\n    for (var i = 0; i < found.length; i++) {\n      var range = findRange(found[i])\n      if (range) return range\n    }\n    return null\n  }\n}\n\nCodeMirror.registerHelper(\"fold\", \"brace\", bracketFolding([[\"{\", \"}\"], [\"[\", \"]\"]]));\n\nCodeMirror.registerHelper(\"fold\", \"brace-paren\", bracketFolding([[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]]));\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var startLine = start.line, has = hasImport(startLine), prev;\n  if (!has || hasImport(startLine - 1) || ((prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var startLine = start.line, has = hasInclude(startLine);\n  if (has == null || hasInclude(startLine - 1) != null) return null;\n  for (var end = startLine;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(startLine, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n"],
  "mappings": "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",
  "names": ["require$$0"]
}
