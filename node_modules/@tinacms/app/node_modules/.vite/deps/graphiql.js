import {
  Button,
  ButtonGroup,
  ChevronDownIcon,
  ChevronUpIcon,
  CopyIcon,
  Dialog2,
  ExecuteButton,
  GraphiQLProvider,
  HeaderEditor,
  KeyboardShortcutIcon,
  MergeIcon,
  PlusIcon,
  PrettifyIcon,
  QueryEditor,
  ReloadIcon,
  ResponseEditor,
  SettingsIcon,
  Spinner,
  Tab,
  Tabs,
  ToolbarButton,
  Tooltip,
  UnStyledButton,
  VariableEditor,
  useCopyQuery,
  useDragResize,
  useEditorContext,
  useExecutionContext,
  useMergeQuery,
  usePluginContext,
  usePrettifyEditors,
  useSchemaContext,
  useStorageContext,
  useTheme
} from "./chunk-LKALJRG6.js";
import "./chunk-RMYGERCM.js";
import {
  require_react_dom
} from "./chunk-KBB5QSWM.js";
import {
  require_react
} from "./chunk-KJ3DELDC.js";
import {
  __toESM
} from "./chunk-OZI5HTJH.js";

// node_modules/@graphiql/react/dist/graphiql-react.es.js
var import_react = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// node_modules/graphiql/esm/components/GraphiQL.js
var import_react2 = __toESM(require_react());
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __rest = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var __read = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var majorVersion = parseInt(import_react2.default.version.slice(0, 2), 10);
if (majorVersion < 16) {
  throw new Error([
    "GraphiQL 0.18.0 and after is not compatible with React 15 or below.",
    "If you are using a CDN source (jsdelivr, unpkg, etc), follow this example:",
    "https://github.com/graphql/graphiql/blob/master/examples/graphiql-cdn/index.html#L49"
  ].join("\n"));
}
function GraphiQL(_a) {
  var dangerouslyAssumeSchemaIsValid = _a.dangerouslyAssumeSchemaIsValid, defaultQuery = _a.defaultQuery, defaultTabs = _a.defaultTabs, externalFragments = _a.externalFragments, fetcher = _a.fetcher, getDefaultFieldNames = _a.getDefaultFieldNames, headers = _a.headers, initialTabs = _a.initialTabs, inputValueDeprecation = _a.inputValueDeprecation, introspectionQueryName = _a.introspectionQueryName, maxHistoryLength = _a.maxHistoryLength, onEditOperationName = _a.onEditOperationName, onSchemaChange = _a.onSchemaChange, onTabChange = _a.onTabChange, onTogglePluginVisibility = _a.onTogglePluginVisibility, operationName = _a.operationName, plugins = _a.plugins, query = _a.query, response = _a.response, schema = _a.schema, schemaDescription = _a.schemaDescription, shouldPersistHeaders = _a.shouldPersistHeaders, storage = _a.storage, validationRules = _a.validationRules, variables = _a.variables, visiblePlugin = _a.visiblePlugin, defaultHeaders = _a.defaultHeaders, props = __rest(_a, ["dangerouslyAssumeSchemaIsValid", "defaultQuery", "defaultTabs", "externalFragments", "fetcher", "getDefaultFieldNames", "headers", "initialTabs", "inputValueDeprecation", "introspectionQueryName", "maxHistoryLength", "onEditOperationName", "onSchemaChange", "onTabChange", "onTogglePluginVisibility", "operationName", "plugins", "query", "response", "schema", "schemaDescription", "shouldPersistHeaders", "storage", "validationRules", "variables", "visiblePlugin", "defaultHeaders"]);
  if (typeof fetcher !== "function") {
    throw new TypeError("The `GraphiQL` component requires a `fetcher` function to be passed as prop.");
  }
  return import_react2.default.createElement(
    GraphiQLProvider,
    { getDefaultFieldNames, dangerouslyAssumeSchemaIsValid, defaultQuery, defaultHeaders, defaultTabs, externalFragments, fetcher, headers, initialTabs, inputValueDeprecation, introspectionQueryName, maxHistoryLength, onEditOperationName, onSchemaChange, onTabChange, onTogglePluginVisibility, plugins, visiblePlugin, operationName, query, response, schema, schemaDescription, shouldPersistHeaders, storage, validationRules, variables },
    import_react2.default.createElement(GraphiQLInterface, __assign({ showPersistHeadersSettings: shouldPersistHeaders !== false }, props))
  );
}
GraphiQL.Logo = GraphiQLLogo;
GraphiQL.Toolbar = GraphiQLToolbar;
GraphiQL.Footer = GraphiQLFooter;
function GraphiQLInterface(props) {
  var _a, _b, _c;
  var isHeadersEditorEnabled = (_a = props.isHeadersEditorEnabled) !== null && _a !== void 0 ? _a : true;
  var editorContext = useEditorContext({ nonNull: true });
  var executionContext = useExecutionContext({ nonNull: true });
  var schemaContext = useSchemaContext({ nonNull: true });
  var storageContext = useStorageContext();
  var pluginContext = usePluginContext();
  var copy = useCopyQuery({ onCopyQuery: props.onCopyQuery });
  var merge = useMergeQuery();
  var prettify = usePrettifyEditors();
  var _d = useTheme(), theme = _d.theme, setTheme = _d.setTheme;
  var PluginContent = (_b = pluginContext === null || pluginContext === void 0 ? void 0 : pluginContext.visiblePlugin) === null || _b === void 0 ? void 0 : _b.content;
  var pluginResize = useDragResize({
    defaultSizeRelation: 1 / 3,
    direction: "horizontal",
    initiallyHidden: (pluginContext === null || pluginContext === void 0 ? void 0 : pluginContext.visiblePlugin) ? void 0 : "first",
    onHiddenElementChange: function(resizableElement) {
      if (resizableElement === "first") {
        pluginContext === null || pluginContext === void 0 ? void 0 : pluginContext.setVisiblePlugin(null);
      }
    },
    sizeThresholdSecond: 200,
    storageKey: "docExplorerFlex"
  });
  var editorResize = useDragResize({
    direction: "horizontal",
    storageKey: "editorFlex"
  });
  var editorToolsResize = useDragResize({
    defaultSizeRelation: 3,
    direction: "vertical",
    initiallyHidden: function() {
      if (props.defaultEditorToolsVisibility === "variables" || props.defaultEditorToolsVisibility === "headers") {
        return void 0;
      }
      if (typeof props.defaultEditorToolsVisibility === "boolean") {
        return props.defaultEditorToolsVisibility ? void 0 : "second";
      }
      return editorContext.initialVariables || editorContext.initialHeaders ? void 0 : "second";
    }(),
    sizeThresholdSecond: 60,
    storageKey: "secondaryEditorFlex"
  });
  var _e = __read((0, import_react2.useState)(function() {
    if (props.defaultEditorToolsVisibility === "variables" || props.defaultEditorToolsVisibility === "headers") {
      return props.defaultEditorToolsVisibility;
    }
    return !editorContext.initialVariables && editorContext.initialHeaders && isHeadersEditorEnabled ? "headers" : "variables";
  }), 2), activeSecondaryEditor = _e[0], setActiveSecondaryEditor = _e[1];
  var _f = __read((0, import_react2.useState)(null), 2), showDialog = _f[0], setShowDialog = _f[1];
  var _g = __read((0, import_react2.useState)(null), 2), clearStorageStatus = _g[0], setClearStorageStatus = _g[1];
  var children = import_react2.default.Children.toArray(props.children);
  var logo = children.find(function(child) {
    return isChildComponentType(child, GraphiQL.Logo);
  }) || import_react2.default.createElement(GraphiQL.Logo, null);
  var toolbar = children.find(function(child) {
    return isChildComponentType(child, GraphiQL.Toolbar);
  }) || import_react2.default.createElement(
    import_react2.default.Fragment,
    null,
    import_react2.default.createElement(
      ToolbarButton,
      { onClick: function() {
        return prettify();
      }, label: "Prettify query (Shift-Ctrl-P)" },
      import_react2.default.createElement(PrettifyIcon, { className: "graphiql-toolbar-icon", "aria-hidden": "true" })
    ),
    import_react2.default.createElement(
      ToolbarButton,
      { onClick: function() {
        return merge();
      }, label: "Merge fragments into query (Shift-Ctrl-M)" },
      import_react2.default.createElement(MergeIcon, { className: "graphiql-toolbar-icon", "aria-hidden": "true" })
    ),
    import_react2.default.createElement(
      ToolbarButton,
      { onClick: function() {
        return copy();
      }, label: "Copy query (Shift-Ctrl-C)" },
      import_react2.default.createElement(CopyIcon, { className: "graphiql-toolbar-icon", "aria-hidden": "true" })
    ),
    ((_c = props.toolbar) === null || _c === void 0 ? void 0 : _c.additionalContent) || null
  );
  var footer = children.find(function(child) {
    return isChildComponentType(child, GraphiQL.Footer);
  });
  var onClickReference = function() {
    if (pluginResize.hiddenElement === "first") {
      pluginResize.setHiddenElement(null);
    }
  };
  var modifier = window.navigator.platform.toLowerCase().indexOf("mac") === 0 ? import_react2.default.createElement("code", { className: "graphiql-key" }, "Cmd") : import_react2.default.createElement("code", { className: "graphiql-key" }, "Ctrl");
  return import_react2.default.createElement(
    "div",
    { "data-testid": "graphiql-container", className: "graphiql-container" },
    import_react2.default.createElement(
      "div",
      { className: "graphiql-sidebar" },
      import_react2.default.createElement("div", { className: "graphiql-sidebar-section" }, pluginContext === null || pluginContext === void 0 ? void 0 : pluginContext.plugins.map(function(plugin) {
        var isVisible = plugin === pluginContext.visiblePlugin;
        var label = "".concat(isVisible ? "Hide" : "Show", " ").concat(plugin.title);
        var Icon = plugin.icon;
        return import_react2.default.createElement(
          Tooltip,
          { key: plugin.title, label },
          import_react2.default.createElement(
            UnStyledButton,
            { type: "button", className: isVisible ? "active" : "", onClick: function() {
              if (isVisible) {
                pluginContext.setVisiblePlugin(null);
                pluginResize.setHiddenElement("first");
              } else {
                pluginContext.setVisiblePlugin(plugin);
                pluginResize.setHiddenElement(null);
              }
            }, "aria-label": label },
            import_react2.default.createElement(Icon, { "aria-hidden": "true" })
          )
        );
      })),
      import_react2.default.createElement(
        "div",
        { className: "graphiql-sidebar-section" },
        import_react2.default.createElement(
          Tooltip,
          { label: "Re-fetch GraphQL schema" },
          import_react2.default.createElement(
            UnStyledButton,
            { type: "button", disabled: schemaContext.isFetching, onClick: function() {
              return schemaContext.introspect();
            }, "aria-label": "Re-fetch GraphQL schema" },
            import_react2.default.createElement(ReloadIcon, { className: schemaContext.isFetching ? "graphiql-spin" : "", "aria-hidden": "true" })
          )
        ),
        import_react2.default.createElement(
          Tooltip,
          { label: "Open short keys dialog" },
          import_react2.default.createElement(
            UnStyledButton,
            { type: "button", onClick: function() {
              return setShowDialog("short-keys");
            }, "aria-label": "Open short keys dialog" },
            import_react2.default.createElement(KeyboardShortcutIcon, { "aria-hidden": "true" })
          )
        ),
        import_react2.default.createElement(
          Tooltip,
          { label: "Open settings dialog" },
          import_react2.default.createElement(
            UnStyledButton,
            { type: "button", onClick: function() {
              return setShowDialog("settings");
            }, "aria-label": "Open settings dialog" },
            import_react2.default.createElement(SettingsIcon, { "aria-hidden": "true" })
          )
        )
      )
    ),
    import_react2.default.createElement(
      "div",
      { className: "graphiql-main" },
      import_react2.default.createElement(
        "div",
        { ref: pluginResize.firstRef, style: {
          minWidth: "200px"
        } },
        import_react2.default.createElement("div", { className: "graphiql-plugin" }, PluginContent ? import_react2.default.createElement(PluginContent, null) : null)
      ),
      import_react2.default.createElement("div", { ref: pluginResize.dragBarRef }, (pluginContext === null || pluginContext === void 0 ? void 0 : pluginContext.visiblePlugin) ? import_react2.default.createElement("div", { className: "graphiql-horizontal-drag-bar" }) : null),
      import_react2.default.createElement(
        "div",
        { ref: pluginResize.secondRef, style: { minWidth: 0 } },
        import_react2.default.createElement(
          "div",
          { className: "graphiql-sessions" },
          import_react2.default.createElement(
            "div",
            { className: "graphiql-session-header" },
            import_react2.default.createElement(Tabs, { "aria-label": "Select active operation" }, editorContext.tabs.length > 1 ? import_react2.default.createElement(
              import_react2.default.Fragment,
              null,
              editorContext.tabs.map(function(tab, index) {
                return import_react2.default.createElement(
                  Tab,
                  { key: tab.id, isActive: index === editorContext.activeTabIndex },
                  import_react2.default.createElement(Tab.Button, { "aria-controls": "graphiql-session", id: "graphiql-session-tab-".concat(index), onClick: function() {
                    executionContext.stop();
                    editorContext.changeTab(index);
                  } }, tab.title),
                  import_react2.default.createElement(Tab.Close, { onClick: function() {
                    if (editorContext.activeTabIndex === index) {
                      executionContext.stop();
                    }
                    editorContext.closeTab(index);
                  } })
                );
              }),
              import_react2.default.createElement(
                "div",
                null,
                import_react2.default.createElement(
                  Tooltip,
                  { label: "Add tab" },
                  import_react2.default.createElement(
                    UnStyledButton,
                    { type: "button", className: "graphiql-tab-add", onClick: function() {
                      return editorContext.addTab();
                    }, "aria-label": "Add tab" },
                    import_react2.default.createElement(PlusIcon, { "aria-hidden": "true" })
                  )
                )
              )
            ) : null),
            import_react2.default.createElement(
              "div",
              { className: "graphiql-session-header-right" },
              editorContext.tabs.length === 1 ? import_react2.default.createElement(
                "div",
                { className: "graphiql-add-tab-wrapper" },
                import_react2.default.createElement(
                  Tooltip,
                  { label: "Add tab" },
                  import_react2.default.createElement(
                    UnStyledButton,
                    { type: "button", className: "graphiql-tab-add", onClick: function() {
                      return editorContext.addTab();
                    }, "aria-label": "Add tab" },
                    import_react2.default.createElement(PlusIcon, { "aria-hidden": "true" })
                  )
                )
              ) : null,
              logo
            )
          ),
          import_react2.default.createElement(
            "div",
            { role: "tabpanel", id: "graphiql-session", className: "graphiql-session", "aria-labelledby": "graphiql-session-tab-".concat(editorContext.activeTabIndex) },
            import_react2.default.createElement(
              "div",
              { ref: editorResize.firstRef },
              import_react2.default.createElement(
                "div",
                { className: "graphiql-editors".concat(editorContext.tabs.length === 1 ? " full-height" : "") },
                import_react2.default.createElement(
                  "div",
                  { ref: editorToolsResize.firstRef },
                  import_react2.default.createElement(
                    "section",
                    { className: "graphiql-query-editor", "aria-label": "Query Editor" },
                    import_react2.default.createElement(
                      "div",
                      { className: "graphiql-query-editor-wrapper" },
                      import_react2.default.createElement(QueryEditor, { editorTheme: props.editorTheme, keyMap: props.keyMap, onClickReference, onCopyQuery: props.onCopyQuery, onEdit: props.onEditQuery, readOnly: props.readOnly })
                    ),
                    import_react2.default.createElement(
                      "div",
                      { className: "graphiql-toolbar", role: "toolbar", "aria-label": "Editor Commands" },
                      import_react2.default.createElement(ExecuteButton, null),
                      toolbar
                    )
                  )
                ),
                import_react2.default.createElement(
                  "div",
                  { ref: editorToolsResize.dragBarRef },
                  import_react2.default.createElement(
                    "div",
                    { className: "graphiql-editor-tools" },
                    import_react2.default.createElement(
                      "div",
                      { className: "graphiql-editor-tools-tabs" },
                      import_react2.default.createElement(UnStyledButton, { type: "button", className: activeSecondaryEditor === "variables" && editorToolsResize.hiddenElement !== "second" ? "active" : "", onClick: function() {
                        if (editorToolsResize.hiddenElement === "second") {
                          editorToolsResize.setHiddenElement(null);
                        }
                        setActiveSecondaryEditor("variables");
                      } }, "Variables"),
                      isHeadersEditorEnabled ? import_react2.default.createElement(UnStyledButton, { type: "button", className: activeSecondaryEditor === "headers" && editorToolsResize.hiddenElement !== "second" ? "active" : "", onClick: function() {
                        if (editorToolsResize.hiddenElement === "second") {
                          editorToolsResize.setHiddenElement(null);
                        }
                        setActiveSecondaryEditor("headers");
                      } }, "Headers") : null
                    ),
                    import_react2.default.createElement(
                      Tooltip,
                      { label: editorToolsResize.hiddenElement === "second" ? "Show editor tools" : "Hide editor tools" },
                      import_react2.default.createElement(UnStyledButton, { type: "button", onClick: function() {
                        editorToolsResize.setHiddenElement(editorToolsResize.hiddenElement === "second" ? null : "second");
                      }, "aria-label": editorToolsResize.hiddenElement === "second" ? "Show editor tools" : "Hide editor tools" }, editorToolsResize.hiddenElement === "second" ? import_react2.default.createElement(ChevronUpIcon, { className: "graphiql-chevron-icon", "aria-hidden": "true" }) : import_react2.default.createElement(ChevronDownIcon, { className: "graphiql-chevron-icon", "aria-hidden": "true" }))
                    )
                  )
                ),
                import_react2.default.createElement(
                  "div",
                  { ref: editorToolsResize.secondRef },
                  import_react2.default.createElement(
                    "section",
                    { className: "graphiql-editor-tool", "aria-label": activeSecondaryEditor === "variables" ? "Variables" : "Headers" },
                    import_react2.default.createElement(VariableEditor, { editorTheme: props.editorTheme, isHidden: activeSecondaryEditor !== "variables", keyMap: props.keyMap, onEdit: props.onEditVariables, onClickReference, readOnly: props.readOnly }),
                    isHeadersEditorEnabled && import_react2.default.createElement(HeaderEditor, { editorTheme: props.editorTheme, isHidden: activeSecondaryEditor !== "headers", keyMap: props.keyMap, onEdit: props.onEditHeaders, readOnly: props.readOnly })
                  )
                )
              )
            ),
            import_react2.default.createElement(
              "div",
              { ref: editorResize.dragBarRef },
              import_react2.default.createElement("div", { className: "graphiql-horizontal-drag-bar" })
            ),
            import_react2.default.createElement(
              "div",
              { ref: editorResize.secondRef },
              import_react2.default.createElement(
                "div",
                { className: "graphiql-response" },
                executionContext.isFetching ? import_react2.default.createElement(Spinner, null) : null,
                import_react2.default.createElement(ResponseEditor, { editorTheme: props.editorTheme, responseTooltip: props.responseTooltip, keyMap: props.keyMap }),
                footer
              )
            )
          )
        )
      )
    ),
    import_react2.default.createElement(
      Dialog2,
      { isOpen: showDialog === "short-keys", onDismiss: function() {
        return setShowDialog(null);
      } },
      import_react2.default.createElement(
        "div",
        { className: "graphiql-dialog-header" },
        import_react2.default.createElement("div", { className: "graphiql-dialog-title" }, "Short Keys"),
        import_react2.default.createElement(Dialog2.Close, { onClick: function() {
          return setShowDialog(null);
        } })
      ),
      import_react2.default.createElement(
        "div",
        { className: "graphiql-dialog-section" },
        import_react2.default.createElement(
          "div",
          null,
          import_react2.default.createElement(
            "table",
            { className: "graphiql-table" },
            import_react2.default.createElement(
              "thead",
              null,
              import_react2.default.createElement(
                "tr",
                null,
                import_react2.default.createElement("th", null, "Short key"),
                import_react2.default.createElement("th", null, "Function")
              )
            ),
            import_react2.default.createElement(
              "tbody",
              null,
              import_react2.default.createElement(
                "tr",
                null,
                import_react2.default.createElement(
                  "td",
                  null,
                  modifier,
                  " + ",
                  import_react2.default.createElement("code", { className: "graphiql-key" }, "F")
                ),
                import_react2.default.createElement("td", null, "Search in editor")
              ),
              import_react2.default.createElement(
                "tr",
                null,
                import_react2.default.createElement(
                  "td",
                  null,
                  modifier,
                  " + ",
                  import_react2.default.createElement("code", { className: "graphiql-key" }, "K")
                ),
                import_react2.default.createElement("td", null, "Search in documentation")
              ),
              import_react2.default.createElement(
                "tr",
                null,
                import_react2.default.createElement(
                  "td",
                  null,
                  modifier,
                  " + ",
                  import_react2.default.createElement("code", { className: "graphiql-key" }, "Enter")
                ),
                import_react2.default.createElement("td", null, "Execute query")
              ),
              import_react2.default.createElement(
                "tr",
                null,
                import_react2.default.createElement(
                  "td",
                  null,
                  import_react2.default.createElement("code", { className: "graphiql-key" }, "Ctrl"),
                  " + ",
                  import_react2.default.createElement("code", { className: "graphiql-key" }, "Shift"),
                  " + ",
                  import_react2.default.createElement("code", { className: "graphiql-key" }, "P")
                ),
                import_react2.default.createElement("td", null, "Prettify editors")
              ),
              import_react2.default.createElement(
                "tr",
                null,
                import_react2.default.createElement(
                  "td",
                  null,
                  import_react2.default.createElement("code", { className: "graphiql-key" }, "Ctrl"),
                  " + ",
                  import_react2.default.createElement("code", { className: "graphiql-key" }, "Shift"),
                  " + ",
                  import_react2.default.createElement("code", { className: "graphiql-key" }, "M")
                ),
                import_react2.default.createElement("td", null, "Merge fragments definitions into operation definition")
              ),
              import_react2.default.createElement(
                "tr",
                null,
                import_react2.default.createElement(
                  "td",
                  null,
                  import_react2.default.createElement("code", { className: "graphiql-key" }, "Ctrl"),
                  " + ",
                  import_react2.default.createElement("code", { className: "graphiql-key" }, "Shift"),
                  " + ",
                  import_react2.default.createElement("code", { className: "graphiql-key" }, "C")
                ),
                import_react2.default.createElement("td", null, "Copy query")
              ),
              import_react2.default.createElement(
                "tr",
                null,
                import_react2.default.createElement(
                  "td",
                  null,
                  import_react2.default.createElement("code", { className: "graphiql-key" }, "Ctrl"),
                  " + ",
                  import_react2.default.createElement("code", { className: "graphiql-key" }, "Shift"),
                  " + ",
                  import_react2.default.createElement("code", { className: "graphiql-key" }, "R")
                ),
                import_react2.default.createElement("td", null, "Re-fetch schema using introspection")
              )
            )
          ),
          import_react2.default.createElement(
            "p",
            null,
            "The editors use",
            " ",
            import_react2.default.createElement("a", { href: "https://codemirror.net/5/doc/manual.html#keymaps", target: "_blank", rel: "noopener noreferrer" }, "CodeMirror Key Maps"),
            " ",
            "that add more short keys. This instance of Graph",
            import_react2.default.createElement("em", null, "i"),
            "QL uses",
            " ",
            import_react2.default.createElement("code", null, props.keyMap || "sublime"),
            "."
          )
        )
      )
    ),
    import_react2.default.createElement(
      Dialog2,
      { isOpen: showDialog === "settings", onDismiss: function() {
        setShowDialog(null);
        setClearStorageStatus(null);
      } },
      import_react2.default.createElement(
        "div",
        { className: "graphiql-dialog-header" },
        import_react2.default.createElement("div", { className: "graphiql-dialog-title" }, "Settings"),
        import_react2.default.createElement(Dialog2.Close, { onClick: function() {
          setShowDialog(null);
          setClearStorageStatus(null);
        } })
      ),
      props.showPersistHeadersSettings ? import_react2.default.createElement(
        "div",
        { className: "graphiql-dialog-section" },
        import_react2.default.createElement(
          "div",
          null,
          import_react2.default.createElement("div", { className: "graphiql-dialog-section-title" }, "Persist headers"),
          import_react2.default.createElement(
            "div",
            { className: "graphiql-dialog-section-caption" },
            "Save headers upon reloading.",
            " ",
            import_react2.default.createElement("span", { className: "graphiql-warning-text" }, "Only enable if you trust this device.")
          )
        ),
        import_react2.default.createElement(
          ButtonGroup,
          null,
          import_react2.default.createElement(Button, { type: "button", id: "enable-persist-headers", className: editorContext.shouldPersistHeaders ? "active" : void 0, onClick: function() {
            editorContext.setShouldPersistHeaders(true);
          } }, "On"),
          import_react2.default.createElement(Button, { type: "button", id: "disable-persist-headers", className: editorContext.shouldPersistHeaders ? void 0 : "active", onClick: function() {
            editorContext.setShouldPersistHeaders(false);
          } }, "Off")
        )
      ) : null,
      import_react2.default.createElement(
        "div",
        { className: "graphiql-dialog-section" },
        import_react2.default.createElement(
          "div",
          null,
          import_react2.default.createElement("div", { className: "graphiql-dialog-section-title" }, "Theme"),
          import_react2.default.createElement("div", { className: "graphiql-dialog-section-caption" }, "Adjust how the interface looks like.")
        ),
        import_react2.default.createElement(
          "div",
          null,
          import_react2.default.createElement(
            ButtonGroup,
            null,
            import_react2.default.createElement(Button, { type: "button", className: theme === null ? "active" : "", onClick: function() {
              return setTheme(null);
            } }, "System"),
            import_react2.default.createElement(Button, { type: "button", className: theme === "light" ? "active" : "", onClick: function() {
              return setTheme("light");
            } }, "Light"),
            import_react2.default.createElement(Button, { type: "button", className: theme === "dark" ? "active" : "", onClick: function() {
              return setTheme("dark");
            } }, "Dark")
          )
        )
      ),
      storageContext ? import_react2.default.createElement(
        "div",
        { className: "graphiql-dialog-section" },
        import_react2.default.createElement(
          "div",
          null,
          import_react2.default.createElement("div", { className: "graphiql-dialog-section-title" }, "Clear storage"),
          import_react2.default.createElement("div", { className: "graphiql-dialog-section-caption" }, "Remove all locally stored data and start fresh.")
        ),
        import_react2.default.createElement(
          "div",
          null,
          import_react2.default.createElement(Button, { type: "button", state: clearStorageStatus || void 0, disabled: clearStorageStatus === "success", onClick: function() {
            try {
              storageContext === null || storageContext === void 0 ? void 0 : storageContext.clear();
              setClearStorageStatus("success");
            } catch (_a2) {
              setClearStorageStatus("error");
            }
          } }, clearStorageStatus === "success" ? "Cleared data" : clearStorageStatus === "error" ? "Failed" : "Clear data")
        )
      ) : null
    )
  );
}
function GraphiQLLogo(props) {
  return import_react2.default.createElement("div", { className: "graphiql-logo" }, props.children || import_react2.default.createElement(
    "a",
    { className: "graphiql-logo-link", href: "https://github.com/graphql/graphiql", target: "_blank", rel: "noreferrer" },
    "Graph",
    import_react2.default.createElement("em", null, "i"),
    "QL"
  ));
}
GraphiQLLogo.displayName = "GraphiQLLogo";
function GraphiQLToolbar(props) {
  return import_react2.default.createElement(import_react2.default.Fragment, null, props.children);
}
GraphiQLToolbar.displayName = "GraphiQLToolbar";
function GraphiQLFooter(props) {
  return import_react2.default.createElement("div", { className: "graphiql-footer" }, props.children);
}
GraphiQLFooter.displayName = "GraphiQLFooter";
function isChildComponentType(child, component) {
  var _a;
  if (((_a = child === null || child === void 0 ? void 0 : child.type) === null || _a === void 0 ? void 0 : _a.displayName) && child.type.displayName === component.displayName) {
    return true;
  }
  return child.type === component;
}
export {
  GraphiQL,
  GraphiQLInterface,
  GraphiQLProvider,
  GraphiQL as default
};
//# sourceMappingURL=graphiql.js.map
