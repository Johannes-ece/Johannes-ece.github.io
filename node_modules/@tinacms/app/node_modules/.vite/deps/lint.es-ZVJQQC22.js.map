{
  "version": 3,
  "sources": ["../../../../../@graphiql/graphql-language-service/esm/utils/validateWithCustomRules.js", "../../../../../@graphiql/graphql-language-service/esm/interface/getDiagnostics.js", "../../../../../@graphiql/codemirror-graphql/esm/lint.js"],
  "sourcesContent": ["import { specifiedRules, validate, NoUnusedFragmentsRule, KnownFragmentNamesRule, Kind, ExecutableDefinitionsRule, LoneSchemaDefinitionRule, UniqueOperationTypesRule, UniqueTypeNamesRule, UniqueEnumValueNamesRule, UniqueFieldDefinitionNamesRule, UniqueDirectiveNamesRule, KnownTypeNamesRule, KnownDirectivesRule, UniqueDirectivesPerLocationRule, PossibleTypeExtensionsRule, UniqueArgumentNamesRule, UniqueInputFieldNamesRule, } from 'graphql';\nconst specifiedSDLRules = [\n    LoneSchemaDefinitionRule,\n    UniqueOperationTypesRule,\n    UniqueTypeNamesRule,\n    UniqueEnumValueNamesRule,\n    UniqueFieldDefinitionNamesRule,\n    UniqueDirectiveNamesRule,\n    KnownTypeNamesRule,\n    KnownDirectivesRule,\n    UniqueDirectivesPerLocationRule,\n    PossibleTypeExtensionsRule,\n    UniqueArgumentNamesRule,\n    UniqueInputFieldNamesRule,\n];\nexport function validateWithCustomRules(schema, ast, customRules, isRelayCompatMode, isSchemaDocument) {\n    const rules = specifiedRules.filter(rule => {\n        if (rule === NoUnusedFragmentsRule || rule === ExecutableDefinitionsRule) {\n            return false;\n        }\n        if (isRelayCompatMode && rule === KnownFragmentNamesRule) {\n            return false;\n        }\n        return true;\n    });\n    if (customRules) {\n        Array.prototype.push.apply(rules, customRules);\n    }\n    if (isSchemaDocument) {\n        Array.prototype.push.apply(rules, specifiedSDLRules);\n    }\n    const errors = validate(schema, ast, rules);\n    return errors.filter(error => {\n        if (error.message.includes('Unknown directive') && error.nodes) {\n            const node = error.nodes[0];\n            if (node && node.kind === Kind.DIRECTIVE) {\n                const name = node.name.value;\n                if (name === 'arguments' || name === 'argumentDefinitions') {\n                    return false;\n                }\n            }\n        }\n        return true;\n    });\n}\n//# sourceMappingURL=validateWithCustomRules.js.map", "import { GraphQLError, print, validate, NoDeprecatedCustomRule, parse, } from 'graphql';\nimport { CharacterStream, onlineParser } from '../parser';\nimport { Range, validateWithCustomRules, Position } from '../utils';\nexport const SEVERITY = {\n    Error: 'Error',\n    Warning: 'Warning',\n    Information: 'Information',\n    Hint: 'Hint',\n};\nexport const DIAGNOSTIC_SEVERITY = {\n    [SEVERITY.Error]: 1,\n    [SEVERITY.Warning]: 2,\n    [SEVERITY.Information]: 3,\n    [SEVERITY.Hint]: 4,\n};\nconst invariant = (condition, message) => {\n    if (!condition) {\n        throw new Error(message);\n    }\n};\nexport function getDiagnostics(query, schema = null, customRules, isRelayCompatMode, externalFragments) {\n    var _a, _b;\n    let ast = null;\n    let fragments = '';\n    if (externalFragments) {\n        fragments =\n            typeof externalFragments === 'string'\n                ? externalFragments\n                : externalFragments.reduce((acc, node) => acc + print(node) + '\\n\\n', '');\n    }\n    const enhancedQuery = fragments ? `${query}\\n\\n${fragments}` : query;\n    try {\n        ast = parse(enhancedQuery);\n    }\n    catch (error) {\n        if (error instanceof GraphQLError) {\n            const range = getRange((_b = (_a = error.locations) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : { line: 0, column: 0 }, enhancedQuery);\n            return [\n                {\n                    severity: DIAGNOSTIC_SEVERITY.Error,\n                    message: error.message,\n                    source: 'GraphQL: Syntax',\n                    range,\n                },\n            ];\n        }\n        throw error;\n    }\n    return validateQuery(ast, schema, customRules, isRelayCompatMode);\n}\nexport function validateQuery(ast, schema = null, customRules, isRelayCompatMode) {\n    if (!schema) {\n        return [];\n    }\n    const validationErrorAnnotations = validateWithCustomRules(schema, ast, customRules, isRelayCompatMode).flatMap(error => annotations(error, DIAGNOSTIC_SEVERITY.Error, 'Validation'));\n    const deprecationWarningAnnotations = validate(schema, ast, [\n        NoDeprecatedCustomRule,\n    ]).flatMap(error => annotations(error, DIAGNOSTIC_SEVERITY.Warning, 'Deprecation'));\n    return validationErrorAnnotations.concat(deprecationWarningAnnotations);\n}\nfunction annotations(error, severity, type) {\n    if (!error.nodes) {\n        return [];\n    }\n    const highlightedNodes = [];\n    error.nodes.forEach((node, i) => {\n        const highlightNode = node.kind !== 'Variable' && 'name' in node && node.name !== undefined\n            ? node.name\n            : 'variable' in node && node.variable !== undefined\n                ? node.variable\n                : node;\n        if (highlightNode) {\n            invariant(error.locations, 'GraphQL validation error requires locations.');\n            const loc = error.locations[i];\n            const highlightLoc = getLocation(highlightNode);\n            const end = loc.column + (highlightLoc.end - highlightLoc.start);\n            highlightedNodes.push({\n                source: `GraphQL: ${type}`,\n                message: error.message,\n                severity,\n                range: new Range(new Position(loc.line - 1, loc.column - 1), new Position(loc.line - 1, end)),\n            });\n        }\n    });\n    return highlightedNodes;\n}\nexport function getRange(location, queryText) {\n    const parser = onlineParser();\n    const state = parser.startState();\n    const lines = queryText.split('\\n');\n    invariant(lines.length >= location.line, 'Query text must have more lines than where the error happened');\n    let stream = null;\n    for (let i = 0; i < location.line; i++) {\n        stream = new CharacterStream(lines[i]);\n        while (!stream.eol()) {\n            const style = parser.token(stream, state);\n            if (style === 'invalidchar') {\n                break;\n            }\n        }\n    }\n    invariant(stream, 'Expected Parser stream to be available.');\n    const line = location.line - 1;\n    const start = stream.getStartOfToken();\n    const end = stream.getCurrentPosition();\n    return new Range(new Position(line, start), new Position(line, end));\n}\nfunction getLocation(node) {\n    const typeCastedNode = node;\n    const location = typeCastedNode.loc;\n    invariant(location, 'Expected ASTNode to have a location.');\n    return location;\n}\n//# sourceMappingURL=getDiagnostics.js.map", "import CodeMirror from 'codemirror';\nimport { getDiagnostics } from 'graphql-language-service';\nconst SEVERITY = ['error', 'warning', 'information', 'hint'];\nconst TYPE = {\n    'GraphQL: Validation': 'validation',\n    'GraphQL: Deprecation': 'deprecation',\n    'GraphQL: Syntax': 'syntax',\n};\nCodeMirror.registerHelper('lint', 'graphql', (text, options) => {\n    const { schema, validationRules, externalFragments } = options;\n    const rawResults = getDiagnostics(text, schema, validationRules, undefined, externalFragments);\n    const results = rawResults.map(error => ({\n        message: error.message,\n        severity: error.severity ? SEVERITY[error.severity - 1] : SEVERITY[0],\n        type: error.source ? TYPE[error.source] : undefined,\n        from: CodeMirror.Pos(error.range.start.line, error.range.start.character),\n        to: CodeMirror.Pos(error.range.end.line, error.range.end.character),\n    }));\n    return results;\n});\n//# sourceMappingURL=lint.js.map"],
  "mappings": "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",
  "names": ["SEVERITY"]
}
