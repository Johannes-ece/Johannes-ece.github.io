{
  "version": 3,
  "sources": ["../../../../../@graphiql/react/dist/graphiql-react.es.js", "../../../../../graphiql/src/components/GraphiQL.tsx"],
  "sourcesContent": ["export { A as Argument, ac as ArgumentIcon, aH as Button, aI as ButtonGroup, ad as ChevronDownIcon, ae as ChevronLeftIcon, af as ChevronUpIcon, ag as CloseIcon, ah as CopyIcon, _ as DOC_EXPLORER_PLUGIN, D as DefaultValue, ai as DeprecatedArgumentIcon, aj as DeprecatedEnumValueIcon, ak as DeprecatedFieldIcon, w as DeprecationReason, aJ as Dialog, x as Directive, al as DirectiveIcon, y as DocExplorer, am as DocsFilledIcon, an as DocsIcon, E as EditorContext, d as EditorContextProvider, ao as EnumValueIcon, aS as ExecuteButton, r as ExecutionContext, s as ExecutionContextProvider, z as ExplorerContext, B as ExplorerContextProvider, F as ExplorerSection, G as FieldDocumentation, ap as FieldIcon, J as FieldLink, a3 as GraphiQLProvider, $ as HISTORY_PLUGIN, H as HeaderEditor, W as History, X as HistoryContext, Y as HistoryContextProvider, aq as HistoryIcon, I as ImagePreview, ar as ImplementsIcon, as as KeyboardShortcutIcon, aL as Listbox, at as MagnifyingGlassIcon, aM as MarkdownContent, aK as Menu, au as MergeIcon, av as PenIcon, aw as PlayIcon, a0 as PluginContext, a1 as PluginContextProvider, ax as PlusIcon, ay as PrettifyIcon, Q as QueryEditor, az as ReloadIcon, R as ResponseEditor, aA as RootTypeIcon, a4 as SchemaContext, a5 as SchemaContextProvider, K as SchemaDocumentation, M as Search, aB as SettingsIcon, aN as Spinner, aC as StarFilledIcon, aD as StarIcon, aE as StopIcon, a7 as StorageContext, a8 as StorageContextProvider, aO as Tab, aP as Tabs, aR as ToolbarButton, aT as ToolbarListbox, aU as ToolbarMenu, aQ as Tooltip, N as TypeDocumentation, aF as TypeIcon, O as TypeLink, aG as UnStyledButton, V as VariableEditor, u as useAutoCompleteLeafs, e as useCopyQuery, ab as useDragResize, f as useEditorContext, v as useExecutionContext, U as useExplorerContext, h as useHeaderEditor, Z as useHistoryContext, j as useMergeQuery, a2 as usePluginContext, k as usePrettifyEditors, m as useQueryEditor, n as useResponseEditor, a6 as useSchemaContext, a9 as useStorageContext, aa as useTheme, q as useVariableEditor } from \"./index.es.js\";\nimport \"react\";\nimport \"graphql\";\nimport \"react-dom\";\n//# sourceMappingURL=graphiql-react.es.js.map\n", "/**\n *  Copyright (c) 2020 GraphQL Contributors.\n *\n *  This source code is licensed under the MIT license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\nimport React, {\n  ComponentType,\n  PropsWithChildren,\n  ReactNode,\n  useState,\n} from 'react';\n\nimport {\n  Button,\n  ButtonGroup,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  CopyIcon,\n  Dialog,\n  ExecuteButton,\n  GraphiQLProvider,\n  GraphiQLProviderProps,\n  HeaderEditor,\n  KeyboardShortcutIcon,\n  MergeIcon,\n  PlusIcon,\n  PrettifyIcon,\n  QueryEditor,\n  ReloadIcon,\n  ResponseEditor,\n  SettingsIcon,\n  Spinner,\n  Tab,\n  Tabs,\n  ToolbarButton,\n  Tooltip,\n  UnStyledButton,\n  useCopyQuery,\n  useDragResize,\n  useEditorContext,\n  useExecutionContext,\n  UseHeaderEditorArgs,\n  useMergeQuery,\n  usePluginContext,\n  usePrettifyEditors,\n  UseQueryEditorArgs,\n  UseResponseEditorArgs,\n  useSchemaContext,\n  useStorageContext,\n  useTheme,\n  UseVariableEditorArgs,\n  VariableEditor,\n  WriteableEditorProps,\n} from '@graphiql/react';\n\nconst majorVersion = parseInt(React.version.slice(0, 2), 10);\n\nif (majorVersion < 16) {\n  throw new Error(\n    [\n      'GraphiQL 0.18.0 and after is not compatible with React 15 or below.',\n      'If you are using a CDN source (jsdelivr, unpkg, etc), follow this example:',\n      'https://github.com/graphql/graphiql/blob/master/examples/graphiql-cdn/index.html#L49',\n    ].join('\\n'),\n  );\n}\n\nexport type GraphiQLToolbarConfig = {\n  /**\n   * This content will be rendered after the built-in buttons of the toolbar.\n   * Note that this will not apply if you provide a completely custom toolbar\n   * (by passing `GraphiQL.Toolbar` as child to the `GraphiQL` component).\n   */\n  additionalContent?: React.ReactNode;\n};\n\n/**\n * API docs for this live here:\n *\n * https://graphiql-test.netlify.app/typedoc/modules/graphiql.html#graphiqlprops\n */\nexport type GraphiQLProps = Omit<GraphiQLProviderProps, 'children'> &\n  GraphiQLInterfaceProps;\n\n/**\n * The top-level React component for GraphiQL, intended to encompass the entire\n * browser viewport.\n *\n * @see https://github.com/graphql/graphiql#usage\n */\n\nexport function GraphiQL({\n  dangerouslyAssumeSchemaIsValid,\n  defaultQuery,\n  defaultTabs,\n  externalFragments,\n  fetcher,\n  getDefaultFieldNames,\n  headers,\n  initialTabs,\n  inputValueDeprecation,\n  introspectionQueryName,\n  maxHistoryLength,\n  onEditOperationName,\n  onSchemaChange,\n  onTabChange,\n  onTogglePluginVisibility,\n  operationName,\n  plugins,\n  query,\n  response,\n  schema,\n  schemaDescription,\n  shouldPersistHeaders,\n  storage,\n  validationRules,\n  variables,\n  visiblePlugin,\n  defaultHeaders,\n  ...props\n}: GraphiQLProps) {\n  // Ensure props are correct\n  if (typeof fetcher !== 'function') {\n    throw new TypeError(\n      'The `GraphiQL` component requires a `fetcher` function to be passed as prop.',\n    );\n  }\n\n  return (\n    <GraphiQLProvider\n      getDefaultFieldNames={getDefaultFieldNames}\n      dangerouslyAssumeSchemaIsValid={dangerouslyAssumeSchemaIsValid}\n      defaultQuery={defaultQuery}\n      defaultHeaders={defaultHeaders}\n      defaultTabs={defaultTabs}\n      externalFragments={externalFragments}\n      fetcher={fetcher}\n      headers={headers}\n      initialTabs={initialTabs}\n      inputValueDeprecation={inputValueDeprecation}\n      introspectionQueryName={introspectionQueryName}\n      maxHistoryLength={maxHistoryLength}\n      onEditOperationName={onEditOperationName}\n      onSchemaChange={onSchemaChange}\n      onTabChange={onTabChange}\n      onTogglePluginVisibility={onTogglePluginVisibility}\n      plugins={plugins}\n      visiblePlugin={visiblePlugin}\n      operationName={operationName}\n      query={query}\n      response={response}\n      schema={schema}\n      schemaDescription={schemaDescription}\n      shouldPersistHeaders={shouldPersistHeaders}\n      storage={storage}\n      validationRules={validationRules}\n      variables={variables}\n    >\n      <GraphiQLInterface\n        showPersistHeadersSettings={shouldPersistHeaders !== false}\n        {...props}\n      />\n    </GraphiQLProvider>\n  );\n}\n// Export main windows/panes to be used separately if desired.\nGraphiQL.Logo = GraphiQLLogo;\nGraphiQL.Toolbar = GraphiQLToolbar;\nGraphiQL.Footer = GraphiQLFooter;\n\ntype AddSuffix<Obj extends Record<string, any>, Suffix extends string> = {\n  [Key in keyof Obj as `${string & Key}${Suffix}`]: Obj[Key];\n};\n\nexport type GraphiQLInterfaceProps = WriteableEditorProps &\n  AddSuffix<Pick<UseQueryEditorArgs, 'onEdit'>, 'Query'> &\n  Pick<UseQueryEditorArgs, 'onCopyQuery'> &\n  AddSuffix<Pick<UseVariableEditorArgs, 'onEdit'>, 'Variables'> &\n  AddSuffix<Pick<UseHeaderEditorArgs, 'onEdit'>, 'Headers'> &\n  Pick<UseResponseEditorArgs, 'responseTooltip'> & {\n    children?: ReactNode;\n    /**\n     * Set the default state for the editor tools.\n     * - `false` hides the editor tools\n     * - `true` shows the editor tools\n     * - `'variables'` specifically shows the variables editor\n     * - `'headers'` specifically shows the headers editor\n     * By default the editor tools are initially shown when at least one of the\n     * editors has contents.\n     */\n    defaultEditorToolsVisibility?: boolean | 'variables' | 'headers';\n    /**\n     * Toggle if the headers editor should be shown inside the editor tools.\n     * @default true\n     */\n    isHeadersEditorEnabled?: boolean;\n    /**\n     * An object that allows configuration of the toolbar next to the query\n     * editor.\n     */\n    toolbar?: GraphiQLToolbarConfig;\n    /**\n     * Indicates if settings for persisting headers should appear in the\n     * settings modal.\n     */\n    showPersistHeadersSettings?: boolean;\n  };\n\nexport function GraphiQLInterface(props: GraphiQLInterfaceProps) {\n  const isHeadersEditorEnabled = props.isHeadersEditorEnabled ?? true;\n\n  const editorContext = useEditorContext({ nonNull: true });\n  const executionContext = useExecutionContext({ nonNull: true });\n  const schemaContext = useSchemaContext({ nonNull: true });\n  const storageContext = useStorageContext();\n  const pluginContext = usePluginContext();\n\n  const copy = useCopyQuery({ onCopyQuery: props.onCopyQuery });\n  const merge = useMergeQuery();\n  const prettify = usePrettifyEditors();\n\n  const { theme, setTheme } = useTheme();\n\n  const PluginContent = pluginContext?.visiblePlugin?.content;\n\n  const pluginResize = useDragResize({\n    defaultSizeRelation: 1 / 3,\n    direction: 'horizontal',\n    initiallyHidden: pluginContext?.visiblePlugin ? undefined : 'first',\n    onHiddenElementChange: resizableElement => {\n      if (resizableElement === 'first') {\n        pluginContext?.setVisiblePlugin(null);\n      }\n    },\n    sizeThresholdSecond: 200,\n    storageKey: 'docExplorerFlex',\n  });\n  const editorResize = useDragResize({\n    direction: 'horizontal',\n    storageKey: 'editorFlex',\n  });\n  const editorToolsResize = useDragResize({\n    defaultSizeRelation: 3,\n    direction: 'vertical',\n    initiallyHidden: (() => {\n      if (\n        props.defaultEditorToolsVisibility === 'variables' ||\n        props.defaultEditorToolsVisibility === 'headers'\n      ) {\n        return undefined;\n      }\n\n      if (typeof props.defaultEditorToolsVisibility === 'boolean') {\n        return props.defaultEditorToolsVisibility ? undefined : 'second';\n      }\n\n      return editorContext.initialVariables || editorContext.initialHeaders\n        ? undefined\n        : 'second';\n    })(),\n    sizeThresholdSecond: 60,\n    storageKey: 'secondaryEditorFlex',\n  });\n\n  const [activeSecondaryEditor, setActiveSecondaryEditor] = useState<\n    'variables' | 'headers'\n  >(() => {\n    if (\n      props.defaultEditorToolsVisibility === 'variables' ||\n      props.defaultEditorToolsVisibility === 'headers'\n    ) {\n      return props.defaultEditorToolsVisibility;\n    }\n    return !editorContext.initialVariables &&\n      editorContext.initialHeaders &&\n      isHeadersEditorEnabled\n      ? 'headers'\n      : 'variables';\n  });\n  const [showDialog, setShowDialog] = useState<\n    'settings' | 'short-keys' | null\n  >(null);\n  const [clearStorageStatus, setClearStorageStatus] = useState<\n    'success' | 'error' | null\n  >(null);\n\n  const children = React.Children.toArray(props.children);\n\n  const logo = children.find(child =>\n    isChildComponentType(child, GraphiQL.Logo),\n  ) || <GraphiQL.Logo />;\n\n  const toolbar = children.find(child =>\n    isChildComponentType(child, GraphiQL.Toolbar),\n  ) || (\n    <>\n      <ToolbarButton\n        onClick={() => prettify()}\n        label=\"Prettify query (Shift-Ctrl-P)\"\n      >\n        <PrettifyIcon className=\"graphiql-toolbar-icon\" aria-hidden=\"true\" />\n      </ToolbarButton>\n      <ToolbarButton\n        onClick={() => merge()}\n        label=\"Merge fragments into query (Shift-Ctrl-M)\"\n      >\n        <MergeIcon className=\"graphiql-toolbar-icon\" aria-hidden=\"true\" />\n      </ToolbarButton>\n      <ToolbarButton onClick={() => copy()} label=\"Copy query (Shift-Ctrl-C)\">\n        <CopyIcon className=\"graphiql-toolbar-icon\" aria-hidden=\"true\" />\n      </ToolbarButton>\n      {props.toolbar?.additionalContent || null}\n    </>\n  );\n\n  const footer = children.find(child =>\n    isChildComponentType(child, GraphiQL.Footer),\n  );\n\n  const onClickReference = () => {\n    if (pluginResize.hiddenElement === 'first') {\n      pluginResize.setHiddenElement(null);\n    }\n  };\n\n  const modifier =\n    window.navigator.platform.toLowerCase().indexOf('mac') === 0 ? (\n      <code className=\"graphiql-key\">Cmd</code>\n    ) : (\n      <code className=\"graphiql-key\">Ctrl</code>\n    );\n\n  return (\n    <div data-testid=\"graphiql-container\" className=\"graphiql-container\">\n      <div className=\"graphiql-sidebar\">\n        <div className=\"graphiql-sidebar-section\">\n          {pluginContext?.plugins.map(plugin => {\n            const isVisible = plugin === pluginContext.visiblePlugin;\n            const label = `${isVisible ? 'Hide' : 'Show'} ${plugin.title}`;\n            const Icon = plugin.icon;\n            return (\n              <Tooltip key={plugin.title} label={label}>\n                <UnStyledButton\n                  type=\"button\"\n                  className={isVisible ? 'active' : ''}\n                  onClick={() => {\n                    if (isVisible) {\n                      pluginContext.setVisiblePlugin(null);\n                      pluginResize.setHiddenElement('first');\n                    } else {\n                      pluginContext.setVisiblePlugin(plugin);\n                      pluginResize.setHiddenElement(null);\n                    }\n                  }}\n                  aria-label={label}\n                >\n                  <Icon aria-hidden=\"true\" />\n                </UnStyledButton>\n              </Tooltip>\n            );\n          })}\n        </div>\n        <div className=\"graphiql-sidebar-section\">\n          <Tooltip label=\"Re-fetch GraphQL schema\">\n            <UnStyledButton\n              type=\"button\"\n              disabled={schemaContext.isFetching}\n              onClick={() => schemaContext.introspect()}\n              aria-label=\"Re-fetch GraphQL schema\"\n            >\n              <ReloadIcon\n                className={schemaContext.isFetching ? 'graphiql-spin' : ''}\n                aria-hidden=\"true\"\n              />\n            </UnStyledButton>\n          </Tooltip>\n          <Tooltip label=\"Open short keys dialog\">\n            <UnStyledButton\n              type=\"button\"\n              onClick={() => setShowDialog('short-keys')}\n              aria-label=\"Open short keys dialog\"\n            >\n              <KeyboardShortcutIcon aria-hidden=\"true\" />\n            </UnStyledButton>\n          </Tooltip>\n          <Tooltip label=\"Open settings dialog\">\n            <UnStyledButton\n              type=\"button\"\n              onClick={() => setShowDialog('settings')}\n              aria-label=\"Open settings dialog\"\n            >\n              <SettingsIcon aria-hidden=\"true\" />\n            </UnStyledButton>\n          </Tooltip>\n        </div>\n      </div>\n      <div className=\"graphiql-main\">\n        <div\n          ref={pluginResize.firstRef}\n          style={{\n            // Make sure the container shrinks when containing long\n            // non-breaking texts\n            minWidth: '200px',\n          }}\n        >\n          <div className=\"graphiql-plugin\">\n            {PluginContent ? <PluginContent /> : null}\n          </div>\n        </div>\n        <div ref={pluginResize.dragBarRef}>\n          {pluginContext?.visiblePlugin ? (\n            <div className=\"graphiql-horizontal-drag-bar\" />\n          ) : null}\n        </div>\n        <div ref={pluginResize.secondRef} style={{ minWidth: 0 }}>\n          <div className=\"graphiql-sessions\">\n            <div className=\"graphiql-session-header\">\n              <Tabs aria-label=\"Select active operation\">\n                {editorContext.tabs.length > 1 ? (\n                  <>\n                    {editorContext.tabs.map((tab, index) => (\n                      <Tab\n                        key={tab.id}\n                        isActive={index === editorContext.activeTabIndex}\n                      >\n                        <Tab.Button\n                          aria-controls=\"graphiql-session\"\n                          id={`graphiql-session-tab-${index}`}\n                          onClick={() => {\n                            executionContext.stop();\n                            editorContext.changeTab(index);\n                          }}\n                        >\n                          {tab.title}\n                        </Tab.Button>\n                        <Tab.Close\n                          onClick={() => {\n                            if (editorContext.activeTabIndex === index) {\n                              executionContext.stop();\n                            }\n                            editorContext.closeTab(index);\n                          }}\n                        />\n                      </Tab>\n                    ))}\n                    <div>\n                      <Tooltip label=\"Add tab\">\n                        <UnStyledButton\n                          type=\"button\"\n                          className=\"graphiql-tab-add\"\n                          onClick={() => editorContext.addTab()}\n                          aria-label=\"Add tab\"\n                        >\n                          <PlusIcon aria-hidden=\"true\" />\n                        </UnStyledButton>\n                      </Tooltip>\n                    </div>\n                  </>\n                ) : null}\n              </Tabs>\n              <div className=\"graphiql-session-header-right\">\n                {editorContext.tabs.length === 1 ? (\n                  <div className=\"graphiql-add-tab-wrapper\">\n                    <Tooltip label=\"Add tab\">\n                      <UnStyledButton\n                        type=\"button\"\n                        className=\"graphiql-tab-add\"\n                        onClick={() => editorContext.addTab()}\n                        aria-label=\"Add tab\"\n                      >\n                        <PlusIcon aria-hidden=\"true\" />\n                      </UnStyledButton>\n                    </Tooltip>\n                  </div>\n                ) : null}\n                {logo}\n              </div>\n            </div>\n            <div\n              role=\"tabpanel\"\n              id=\"graphiql-session\"\n              className=\"graphiql-session\"\n              aria-labelledby={`graphiql-session-tab-${editorContext.activeTabIndex}`}\n            >\n              <div ref={editorResize.firstRef}>\n                <div\n                  className={`graphiql-editors${\n                    editorContext.tabs.length === 1 ? ' full-height' : ''\n                  }`}\n                >\n                  <div ref={editorToolsResize.firstRef}>\n                    <section\n                      className=\"graphiql-query-editor\"\n                      aria-label=\"Query Editor\"\n                    >\n                      <div className=\"graphiql-query-editor-wrapper\">\n                        <QueryEditor\n                          editorTheme={props.editorTheme}\n                          keyMap={props.keyMap}\n                          onClickReference={onClickReference}\n                          onCopyQuery={props.onCopyQuery}\n                          onEdit={props.onEditQuery}\n                          readOnly={props.readOnly}\n                        />\n                      </div>\n                      <div\n                        className=\"graphiql-toolbar\"\n                        role=\"toolbar\"\n                        aria-label=\"Editor Commands\"\n                      >\n                        <ExecuteButton />\n                        {toolbar}\n                      </div>\n                    </section>\n                  </div>\n                  <div ref={editorToolsResize.dragBarRef}>\n                    <div className=\"graphiql-editor-tools\">\n                      <div className=\"graphiql-editor-tools-tabs\">\n                        <UnStyledButton\n                          type=\"button\"\n                          className={\n                            activeSecondaryEditor === 'variables' &&\n                            editorToolsResize.hiddenElement !== 'second'\n                              ? 'active'\n                              : ''\n                          }\n                          onClick={() => {\n                            if (editorToolsResize.hiddenElement === 'second') {\n                              editorToolsResize.setHiddenElement(null);\n                            }\n                            setActiveSecondaryEditor('variables');\n                          }}\n                        >\n                          Variables\n                        </UnStyledButton>\n                        {isHeadersEditorEnabled ? (\n                          <UnStyledButton\n                            type=\"button\"\n                            className={\n                              activeSecondaryEditor === 'headers' &&\n                              editorToolsResize.hiddenElement !== 'second'\n                                ? 'active'\n                                : ''\n                            }\n                            onClick={() => {\n                              if (\n                                editorToolsResize.hiddenElement === 'second'\n                              ) {\n                                editorToolsResize.setHiddenElement(null);\n                              }\n                              setActiveSecondaryEditor('headers');\n                            }}\n                          >\n                            Headers\n                          </UnStyledButton>\n                        ) : null}\n                      </div>\n                      <Tooltip\n                        label={\n                          editorToolsResize.hiddenElement === 'second'\n                            ? 'Show editor tools'\n                            : 'Hide editor tools'\n                        }\n                      >\n                        <UnStyledButton\n                          type=\"button\"\n                          onClick={() => {\n                            editorToolsResize.setHiddenElement(\n                              editorToolsResize.hiddenElement === 'second'\n                                ? null\n                                : 'second',\n                            );\n                          }}\n                          aria-label={\n                            editorToolsResize.hiddenElement === 'second'\n                              ? 'Show editor tools'\n                              : 'Hide editor tools'\n                          }\n                        >\n                          {editorToolsResize.hiddenElement === 'second' ? (\n                            <ChevronUpIcon\n                              className=\"graphiql-chevron-icon\"\n                              aria-hidden=\"true\"\n                            />\n                          ) : (\n                            <ChevronDownIcon\n                              className=\"graphiql-chevron-icon\"\n                              aria-hidden=\"true\"\n                            />\n                          )}\n                        </UnStyledButton>\n                      </Tooltip>\n                    </div>\n                  </div>\n                  <div ref={editorToolsResize.secondRef}>\n                    <section\n                      className=\"graphiql-editor-tool\"\n                      aria-label={\n                        activeSecondaryEditor === 'variables'\n                          ? 'Variables'\n                          : 'Headers'\n                      }\n                    >\n                      <VariableEditor\n                        editorTheme={props.editorTheme}\n                        isHidden={activeSecondaryEditor !== 'variables'}\n                        keyMap={props.keyMap}\n                        onEdit={props.onEditVariables}\n                        onClickReference={onClickReference}\n                        readOnly={props.readOnly}\n                      />\n                      {isHeadersEditorEnabled && (\n                        <HeaderEditor\n                          editorTheme={props.editorTheme}\n                          isHidden={activeSecondaryEditor !== 'headers'}\n                          keyMap={props.keyMap}\n                          onEdit={props.onEditHeaders}\n                          readOnly={props.readOnly}\n                        />\n                      )}\n                    </section>\n                  </div>\n                </div>\n              </div>\n              <div ref={editorResize.dragBarRef}>\n                <div className=\"graphiql-horizontal-drag-bar\" />\n              </div>\n              <div ref={editorResize.secondRef}>\n                <div className=\"graphiql-response\">\n                  {executionContext.isFetching ? <Spinner /> : null}\n                  <ResponseEditor\n                    editorTheme={props.editorTheme}\n                    responseTooltip={props.responseTooltip}\n                    keyMap={props.keyMap}\n                  />\n                  {footer}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <Dialog\n        isOpen={showDialog === 'short-keys'}\n        onDismiss={() => setShowDialog(null)}\n      >\n        <div className=\"graphiql-dialog-header\">\n          <div className=\"graphiql-dialog-title\">Short Keys</div>\n          <Dialog.Close onClick={() => setShowDialog(null)} />\n        </div>\n        <div className=\"graphiql-dialog-section\">\n          <div>\n            <table className=\"graphiql-table\">\n              <thead>\n                <tr>\n                  <th>Short key</th>\n                  <th>Function</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>\n                    {modifier}\n                    {' + '}\n                    <code className=\"graphiql-key\">F</code>\n                  </td>\n                  <td>Search in editor</td>\n                </tr>\n                <tr>\n                  <td>\n                    {modifier}\n                    {' + '}\n                    <code className=\"graphiql-key\">K</code>\n                  </td>\n                  <td>Search in documentation</td>\n                </tr>\n                <tr>\n                  <td>\n                    {modifier}\n                    {' + '}\n                    <code className=\"graphiql-key\">Enter</code>\n                  </td>\n                  <td>Execute query</td>\n                </tr>\n                <tr>\n                  <td>\n                    <code className=\"graphiql-key\">Ctrl</code>\n                    {' + '}\n                    <code className=\"graphiql-key\">Shift</code>\n                    {' + '}\n                    <code className=\"graphiql-key\">P</code>\n                  </td>\n                  <td>Prettify editors</td>\n                </tr>\n                <tr>\n                  <td>\n                    <code className=\"graphiql-key\">Ctrl</code>\n                    {' + '}\n                    <code className=\"graphiql-key\">Shift</code>\n                    {' + '}\n                    <code className=\"graphiql-key\">M</code>\n                  </td>\n                  <td>Merge fragments definitions into operation definition</td>\n                </tr>\n                <tr>\n                  <td>\n                    <code className=\"graphiql-key\">Ctrl</code>\n                    {' + '}\n                    <code className=\"graphiql-key\">Shift</code>\n                    {' + '}\n                    <code className=\"graphiql-key\">C</code>\n                  </td>\n                  <td>Copy query</td>\n                </tr>\n                <tr>\n                  <td>\n                    <code className=\"graphiql-key\">Ctrl</code>\n                    {' + '}\n                    <code className=\"graphiql-key\">Shift</code>\n                    {' + '}\n                    <code className=\"graphiql-key\">R</code>\n                  </td>\n                  <td>Re-fetch schema using introspection</td>\n                </tr>\n              </tbody>\n            </table>\n            <p>\n              The editors use{' '}\n              <a\n                href=\"https://codemirror.net/5/doc/manual.html#keymaps\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                CodeMirror Key Maps\n              </a>{' '}\n              that add more short keys. This instance of Graph<em>i</em>QL uses{' '}\n              <code>{props.keyMap || 'sublime'}</code>.\n            </p>\n          </div>\n        </div>\n      </Dialog>\n      <Dialog\n        isOpen={showDialog === 'settings'}\n        onDismiss={() => {\n          setShowDialog(null);\n          setClearStorageStatus(null);\n        }}\n      >\n        <div className=\"graphiql-dialog-header\">\n          <div className=\"graphiql-dialog-title\">Settings</div>\n          <Dialog.Close\n            onClick={() => {\n              setShowDialog(null);\n              setClearStorageStatus(null);\n            }}\n          />\n        </div>\n        {props.showPersistHeadersSettings ? (\n          <div className=\"graphiql-dialog-section\">\n            <div>\n              <div className=\"graphiql-dialog-section-title\">\n                Persist headers\n              </div>\n              <div className=\"graphiql-dialog-section-caption\">\n                Save headers upon reloading.{' '}\n                <span className=\"graphiql-warning-text\">\n                  Only enable if you trust this device.\n                </span>\n              </div>\n            </div>\n            <ButtonGroup>\n              <Button\n                type=\"button\"\n                id=\"enable-persist-headers\"\n                className={\n                  editorContext.shouldPersistHeaders ? 'active' : undefined\n                }\n                onClick={() => {\n                  editorContext.setShouldPersistHeaders(true);\n                }}\n              >\n                On\n              </Button>\n              <Button\n                type=\"button\"\n                id=\"disable-persist-headers\"\n                className={\n                  editorContext.shouldPersistHeaders ? undefined : 'active'\n                }\n                onClick={() => {\n                  editorContext.setShouldPersistHeaders(false);\n                }}\n              >\n                Off\n              </Button>\n            </ButtonGroup>\n          </div>\n        ) : null}\n        <div className=\"graphiql-dialog-section\">\n          <div>\n            <div className=\"graphiql-dialog-section-title\">Theme</div>\n            <div className=\"graphiql-dialog-section-caption\">\n              Adjust how the interface looks like.\n            </div>\n          </div>\n          <div>\n            <ButtonGroup>\n              <Button\n                type=\"button\"\n                className={theme === null ? 'active' : ''}\n                onClick={() => setTheme(null)}\n              >\n                System\n              </Button>\n              <Button\n                type=\"button\"\n                className={theme === 'light' ? 'active' : ''}\n                onClick={() => setTheme('light')}\n              >\n                Light\n              </Button>\n              <Button\n                type=\"button\"\n                className={theme === 'dark' ? 'active' : ''}\n                onClick={() => setTheme('dark')}\n              >\n                Dark\n              </Button>\n            </ButtonGroup>\n          </div>\n        </div>\n        {storageContext ? (\n          <div className=\"graphiql-dialog-section\">\n            <div>\n              <div className=\"graphiql-dialog-section-title\">Clear storage</div>\n              <div className=\"graphiql-dialog-section-caption\">\n                Remove all locally stored data and start fresh.\n              </div>\n            </div>\n            <div>\n              <Button\n                type=\"button\"\n                state={clearStorageStatus || undefined}\n                disabled={clearStorageStatus === 'success'}\n                onClick={() => {\n                  try {\n                    storageContext?.clear();\n                    setClearStorageStatus('success');\n                  } catch {\n                    setClearStorageStatus('error');\n                  }\n                }}\n              >\n                {clearStorageStatus === 'success'\n                  ? 'Cleared data'\n                  : clearStorageStatus === 'error'\n                  ? 'Failed'\n                  : 'Clear data'}\n              </Button>\n            </div>\n          </div>\n        ) : null}\n      </Dialog>\n    </div>\n  );\n}\n\n// Configure the UI by providing this Component as a child of GraphiQL.\nfunction GraphiQLLogo<TProps>(props: PropsWithChildren<TProps>) {\n  return (\n    <div className=\"graphiql-logo\">\n      {props.children || (\n        <a\n          className=\"graphiql-logo-link\"\n          href=\"https://github.com/graphql/graphiql\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Graph\n          <em>i</em>\n          QL\n        </a>\n      )}\n    </div>\n  );\n}\n\nGraphiQLLogo.displayName = 'GraphiQLLogo';\n\n// Configure the UI by providing this Component as a child of GraphiQL.\nfunction GraphiQLToolbar<TProps>(props: PropsWithChildren<TProps>) {\n  // eslint-disable-next-line react/jsx-no-useless-fragment\n  return <>{props.children}</>;\n}\n\nGraphiQLToolbar.displayName = 'GraphiQLToolbar';\n\n// Configure the UI by providing this Component as a child of GraphiQL.\nfunction GraphiQLFooter<TProps>(props: PropsWithChildren<TProps>) {\n  return <div className=\"graphiql-footer\">{props.children}</div>;\n}\n\nGraphiQLFooter.displayName = 'GraphiQLFooter';\n\n// Determines if the React child is of the same type of the provided React component\nfunction isChildComponentType<T extends ComponentType>(\n  child: any,\n  component: T,\n): child is T {\n  if (\n    child?.type?.displayName &&\n    child.type.displayName === component.displayName\n  ) {\n    return true;\n  }\n\n  return child.type === component;\n}\n"],
  "mappings": "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",
  "names": ["import_react", "React", "_a"]
}
